{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Java Solitaire Project  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}Java Solitaire Project}
{\comment Generated by doxygen 1.12.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Java Solitaire Project}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Card\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Deck\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BuildDeck\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
DiscardDeck\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TableDeck\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Main\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ScoreSystem\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
UserInputScanner\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b BuildDeck} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Card} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Deck} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DiscardDeck} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Main} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ScoreSystem} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TableDeck} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UserInputScanner} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b BuildDeck.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Card.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Deck.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b DiscardDeck.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Main.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b ScoreSystem.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b TableDeck.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b UserInputScanner.java} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BuildDeck Class Reference\par \pard\plain 
{\tc\tcl2 \v BuildDeck}
{\xe \v BuildDeck}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
Inheritance diagram for BuildDeck:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_build_deck.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BuildDeck} (String suite)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b playCard} ({\b Card} cardIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getDeckSize} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Deck}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b defineCards} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shuffleDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b takeCard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCard} ({\b Card} cardIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refillDeck} ({\b Deck} deckIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printDeck} (int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printTopCard} (int line)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b BuildDeck} class extends the {\b Deck} class and represents one of the 4 'build' decks that the player can place cards on. \par
}{
Definition at line {\b 5} of file {\b BuildDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v BuildDeck\:BuildDeck}
{\xe \v BuildDeck\:BuildDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
BuildDeck.BuildDeck (String suite)}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b BuildDeck} class.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i suite} \cell }{The suit associated with the deck. \cell }
{\row }
}
}{
Definition at line {\b 15} of file {\b BuildDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getDeckSize\:BuildDeck}
{\xe \v BuildDeck\:getDeckSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int BuildDeck.getDeckSize ()}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to get the size of the deck.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The size of the deck. \par
}}}{
Definition at line {\b 141} of file {\b BuildDeck.java}.}\par
}
{\xe \v playCard\:BuildDeck}
{\xe \v BuildDeck\:playCard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Card} BuildDeck.playCard ({\b Card} cardIn)}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Plays a card into the deck if it matches the associated suit and follows the correct rank order.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cardIn} \cell }{The card to be played. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The card played, or null if the card was successfully added to the deck. \par
}}}{
Definition at line {\b 28} of file {\b BuildDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b BuildDeck.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Card Class Reference\par \pard\plain 
{\tc\tcl2 \v Card}
{\xe \v Card}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} (String rank, String suit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b getRank} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b getSuit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNumValue} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Boolean {\b isShown} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Boolean {\b isUnder} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b show} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b hide} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b over} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b under} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 2} of file {\b Card.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Card\:Card}
{\xe \v Card\:Card}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Card.Card (String rank, String suit)}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b Card} class.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i rank} \cell }{The rank of the card. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i suit} \cell }{The suit of the card. \cell }
{\row }
}
}{
Definition at line {\b 15} of file {\b Card.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getNumValue\:Card}
{\xe \v Card\:getNumValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Card.getNumValue ()}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 48} of file {\b Card.java}.}\par
}
{\xe \v getRank\:Card}
{\xe \v Card\:getRank}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Card.getRank ()}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b Card.java}.}\par
}
{\xe \v getSuit\:Card}
{\xe \v Card\:getSuit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Card.getSuit ()}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b Card.java}.}\par
}
{\xe \v hide\:Card}
{\xe \v Card\:hide}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Card.hide ()}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 65} of file {\b Card.java}.}\par
}
{\xe \v isShown\:Card}
{\xe \v Card\:isShown}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Boolean Card.isShown ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b Card.java}.}\par
}
{\xe \v isUnder\:Card}
{\xe \v Card\:isUnder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Boolean Card.isUnder ()}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 56} of file {\b Card.java}.}\par
}
{\xe \v over\:Card}
{\xe \v Card\:over}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Card.over ()}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 69} of file {\b Card.java}.}\par
}
{\xe \v show\:Card}
{\xe \v Card\:show}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Card.show ()}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 61} of file {\b Card.java}.}\par
}
{\xe \v under\:Card}
{\xe \v Card\:under}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Card.under ()}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 73} of file {\b Card.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Card.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Deck Class Reference\par \pard\plain 
{\tc\tcl2 \v Deck}
{\xe \v Deck}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
Inheritance diagram for Deck:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_deck.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b defineCards} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shuffleDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b takeCard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCard} ({\b Card} cardIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refillDeck} ({\b Deck} deckIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printDeck} (int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printTopCard} (int line)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The {\b Deck} class represents a deck of cards. It contains an ArrayList of {\b Card} objects and methods to shuffle the deck, take a card from the deck, add a card to the deck, and refill the deck. All piles in the game are represented by supers of this class or this class itself. \par
}{
Definition at line {\b 10} of file {\b Deck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addCard\:Deck}
{\xe \v Deck\:addCard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Deck.addCard ({\b Card} cardIn)}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to add a card to the top of the deck. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cardIn} \cell }{The card to add to the deck. \cell }
{\row }
}
}{
Definition at line {\b 55} of file {\b Deck.java}.}\par
}
{\xe \v defineCards\:Deck}
{\xe \v Deck\:defineCards}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Deck.defineCards ()}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A constructor for the {\b Deck} class that creates a deck with all 52 cards. \par
}{
Definition at line {\b 17} of file {\b Deck.java}.}\par
}
{\xe \v printDeck\:Deck}
{\xe \v Deck\:printDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Deck.printDeck (int line)}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to print the deck. This takes a line number as an argument and returns the string to be printed. It prints the cards as nCards*3 lines, which can be selected by the line number. Therefore, by calling this method, and indexing the line number a sufficient number of times, the entire deck can be printed. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i line} \cell }{The line number to print. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A string representation of one of the lines making up one of the cards in the deck \par
}}}{
Definition at line {\b 85} of file {\b Deck.java}.}\par
}
{\xe \v printTopCard\:Deck}
{\xe \v Deck\:printTopCard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String Deck.printTopCard (int line)}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to print the top card of the deck. This takes a line number as an argument and returns the string to be printed. It prints the top card as 3 lines, which can be selected by the line number. This is used to render the top card of the deck in the game for the build piles. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i line} \cell }{The line number to print. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
A string representation of one of the lines making up the top card in the deck. \par
}}}{
Definition at line {\b 142} of file {\b Deck.java}.}\par
}
{\xe \v refillDeck\:Deck}
{\xe \v Deck\:refillDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Deck.refillDeck ({\b Deck} deckIn)}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to refill the deck with the cards from another deck. This is used to refill the draw pile from the discard pile. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deckIn} \cell }{The deck to take the cards from. \cell }
{\row }
}
}{
Definition at line {\b 68} of file {\b Deck.java}.}\par
}
{\xe \v shuffleDeck\:Deck}
{\xe \v Deck\:shuffleDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Deck.shuffleDeck ()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to shuffle the deck. \par
}{
Definition at line {\b 28} of file {\b Deck.java}.}\par
}
{\xe \v takeCard\:Deck}
{\xe \v Deck\:takeCard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Card} Deck.takeCard ()}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to take the last (top) card from the deck. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The card taken from the deck. \par
}}}{
Definition at line {\b 38} of file {\b Deck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Deck.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DiscardDeck Class Reference\par \pard\plain 
{\tc\tcl2 \v DiscardDeck}
{\xe \v DiscardDeck}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
Inheritance diagram for DiscardDeck:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_discard_deck.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DiscardDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCards} ({\b Deck} deckIn)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Deck}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b defineCards} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shuffleDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b takeCard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCard} ({\b Card} cardIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refillDeck} ({\b Deck} deckIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printDeck} (int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printTopCard} (int line)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 2} of file {\b DiscardDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v DiscardDeck\:DiscardDeck}
{\xe \v DiscardDeck\:DiscardDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DiscardDeck.DiscardDeck ()}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 4} of file {\b DiscardDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v addCards\:DiscardDeck}
{\xe \v DiscardDeck\:addCards}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void DiscardDeck.addCards ({\b Deck} deckIn)}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
addCards method to add cards to the discard deck from the draw pile. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deckIn} \cell }{The deck object to take the cards from. \cell }
{\row }
}
}{
Definition at line {\b 12} of file {\b DiscardDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b DiscardDeck.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Main Class Reference\par \pard\plain 
{\tc\tcl2 \v Main}
{\xe \v Main}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b main} (String[] args)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 8} of file {\b Main.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v main\:Main}
{\xe \v Main\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void Main.main (String[] args){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 10} of file {\b Main.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b Main.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ScoreSystem Class Reference\par \pard\plain 
{\tc\tcl2 \v ScoreSystem}
{\xe \v ScoreSystem}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ScoreSystem} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getScore} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b elapedTime} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b scoreFromDiscard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b scoreFromTable} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b toTableScore} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setMultipleBuffer} (int multiple)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b scoreFromTableMultiple} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearMultipleBuffer} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 2} of file {\b ScoreSystem.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ScoreSystem\:ScoreSystem}
{\xe \v ScoreSystem\:ScoreSystem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ScoreSystem.ScoreSystem ()}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor for the {\b ScoreSystem} class. \par
}{
Definition at line {\b 10} of file {\b ScoreSystem.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v clearMultipleBuffer\:ScoreSystem}
{\xe \v ScoreSystem\:clearMultipleBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.clearMultipleBuffer ()}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to clear the multiple buffer if the move is not sucessful. \par
}{
Definition at line {\b 70} of file {\b ScoreSystem.java}.}\par
}
{\xe \v elapedTime\:ScoreSystem}
{\xe \v ScoreSystem\:elapedTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ScoreSystem.elapedTime ()}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to return the elapsed time since the start of the game. \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The elapsed time in seconds. \par
}}}{
Definition at line {\b 27} of file {\b ScoreSystem.java}.}\par
}
{\xe \v getScore\:ScoreSystem}
{\xe \v ScoreSystem\:getScore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ScoreSystem.getScore ()}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter to return the score. \par
}{
Definition at line {\b 19} of file {\b ScoreSystem.java}.}\par
}
{\xe \v scoreFromDiscard\:ScoreSystem}
{\xe \v ScoreSystem\:scoreFromDiscard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.scoreFromDiscard ()}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to update the score when a card is moved from the discard pile to the build pile. \par
}{
Definition at line {\b 34} of file {\b ScoreSystem.java}.}\par
}
{\xe \v scoreFromTable\:ScoreSystem}
{\xe \v ScoreSystem\:scoreFromTable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.scoreFromTable ()}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to update the score when a card is moved from the table to the build pile. \par
}{
Definition at line {\b 41} of file {\b ScoreSystem.java}.}\par
}
{\xe \v scoreFromTableMultiple\:ScoreSystem}
{\xe \v ScoreSystem\:scoreFromTableMultiple}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.scoreFromTableMultiple ()}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to update the score when multiple cards are moved from the table to table. \par
}{
Definition at line {\b 62} of file {\b ScoreSystem.java}.}\par
}
{\xe \v setMultipleBuffer\:ScoreSystem}
{\xe \v ScoreSystem\:setMultipleBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.setMultipleBuffer (int multiple)}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to set the number of cards being moved, which can be used to update the score if sucessful. \par
}{
Definition at line {\b 55} of file {\b ScoreSystem.java}.}\par
}
{\xe \v toTableScore\:ScoreSystem}
{\xe \v ScoreSystem\:toTableScore}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ScoreSystem.toTableScore ()}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to update the score when a card is moved from table pile to table pile, or from discard pile to table pile. \par
}{
Definition at line {\b 48} of file {\b ScoreSystem.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b ScoreSystem.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TableDeck Class Reference\par \pard\plain 
{\tc\tcl2 \v TableDeck}
{\xe \v TableDeck}
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
Inheritance diagram for TableDeck:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_table_deck.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TableDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b initalFill} (int nCards, {\b Deck} deckIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b revealCardCheck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Deck} {\b grabStack} (int indx)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Deck} {\b placeStack} ({\b Deck} stack)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b playCard} ({\b Card} cardIn)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Public Member Functions inherited from {\b Deck}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b defineCards} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b shuffleDeck} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Card} {\b takeCard} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addCard} ({\b Card} cardIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b refillDeck} ({\b Deck} deckIn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printDeck} (int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String {\b printTopCard} (int line)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 2} of file {\b TableDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v TableDeck\:TableDeck}
{\xe \v TableDeck\:TableDeck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TableDeck.TableDeck ()}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 7} of file {\b TableDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v grabStack\:TableDeck}
{\xe \v TableDeck\:grabStack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Deck} TableDeck.grabStack (int indx)}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to grab a stack of cards from the deck. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i indx} \cell }{The index of the card to grab the stack from. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The stack of cards as a {\b Deck} object. \par
}}}{
Definition at line {\b 54} of file {\b TableDeck.java}.}\par
}
{\xe \v initalFill\:TableDeck}
{\xe \v TableDeck\:initalFill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TableDeck.initalFill (int nCards, {\b Deck} deckIn)}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to fill the deck with a number of cards from a deck object. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i nCards} \cell }{The number of cards to fill the deck with. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deckIn} \cell }{The deck object to take the cards from. \cell }
{\row }
}
}{
Definition at line {\b 16} of file {\b TableDeck.java}.}\par
}
{\xe \v placeStack\:TableDeck}
{\xe \v TableDeck\:placeStack}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Deck} TableDeck.placeStack ({\b Deck} stack)}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to place a stack of cards onto the deck. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i stack} \cell }{The stack of cards to place. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The stack of cards. \par
}}}{
Definition at line {\b 71} of file {\b TableDeck.java}.}\par
}
{\xe \v playCard\:TableDeck}
{\xe \v TableDeck\:playCard}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Card} TableDeck.playCard ({\b Card} cardIn)}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to play a card onto the deck. {\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cardIn} \cell }{The card to play. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The card played, or null if the card was successfully added to the deck. \par
}}}{
Definition at line {\b 97} of file {\b TableDeck.java}.}\par
}
{\xe \v revealCardCheck\:TableDeck}
{\xe \v TableDeck\:revealCardCheck}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void TableDeck.revealCardCheck ()}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to reveal the top card of the deck and check if there is a stack of cards. \par
}{
Definition at line {\b 32} of file {\b TableDeck.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b TableDeck.java}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UserInputScanner Class Reference\par \pard\plain 
{\tc\tcl2 \v UserInputScanner}
{\xe \v UserInputScanner}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
String[] {\b makeMove} (Scanner scanner)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b pickIndex} (Scanner scanner, {\b Deck} deck)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b loadIndx} (String inxString, {\b Deck} deck)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 5} of file {\b UserInputScanner.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v loadIndx\:UserInputScanner}
{\xe \v UserInputScanner\:loadIndx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int UserInputScanner.loadIndx (String inxString, {\b Deck} deck)}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to use the previous user input to check and return the index of the card that the user wants to move.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i inxString} \cell }{The user input as a string. (Number of cards to move) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deck} \cell }{The deck object from which the card is to be loaded from. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The index of the card to load as an integer. \par
}}}{
Definition at line {\b 111} of file {\b UserInputScanner.java}.}\par
}
{\xe \v makeMove\:UserInputScanner}
{\xe \v UserInputScanner\:makeMove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
String[] UserInputScanner.makeMove (Scanner scanner)}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to get the user input for the move. The user can input the source stack, destination stack and the number of cards to move.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scanner} \cell }{The scanner object to get the user input. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The user input as a string array. \par
}}}{
Definition at line {\b 14} of file {\b UserInputScanner.java}.}\par
}
{\xe \v pickIndex\:UserInputScanner}
{\xe \v UserInputScanner\:pickIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int UserInputScanner.pickIndex (Scanner scanner, {\b Deck} deck)}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Method to get the user input for the number of cards to move (index).\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i scanner} \cell }{The scanner object to get the user input. \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i deck} \cell }{The deck object from which the cards are to be moved from. \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
The number of cards to move as an integer. \par
}}}{
Definition at line {\b 78} of file {\b UserInputScanner.java}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/{\b UserInputScanner.java}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/BuildDeck.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/BuildDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/BuildDeck.java}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BuildDeck}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BuildDeck.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/BuildDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/BuildDeck.java}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00005 {\cf17 public} {\cf17 class }BuildDeck {\cf17 extends} Deck \{\par
00006 \par
00007     {\cf20 // String to store the suit of the build deck}\par
00008     String assosiatedSuit;\par
00009 \par
00015     {\cf17 public} BuildDeck(String suite) \{\par
00016         super();\par
00017         this.assosiatedSuit = suite;\par
00018     \}\par
00019 \par
00028     {\cf17 public} Card playCard(Card cardIn) \{\par
00029         String currentRank;\par
00030         {\cf19 if} (this.deck.isEmpty()) \{\par
00031             currentRank = {\cf22 "EMPTY"}; {\cf20 // If the deck is empty, the current rank is set to "EMPTY"}\par
00032         \} {\cf19 else} \{\par
00033             currentRank = this.deck.getLast().getRank(); {\cf20 // Otherwise, the current rank is set to the rank of the last card in the deck}\par
00034         \}\par
00035         {\cf19 if} (cardIn.getSuit().equals({\cf17 this}.assosiatedSuit)) \{ {\cf20 // If the card's suit matches the associated suit of the deck}\par
00036             {\cf19 switch} (currentRank) \{ {\cf20 // Switch statement to check if the card's rank follows the correct order}\par
00037                 {\cf19 case} {\cf22 "EMPTY"} -> \{\par
00038                     {\cf19 if} (cardIn.getRank().equals({\cf22 " A"})) \{ {\cf20 // If the deck is empty, the card must be an Ace}\par
00039                         this.deck.add(cardIn);\par
00040                         {\cf19 return} {\cf17 null};\par
00041                     \}\par
00042                     {\cf19 break};\par
00043                 \}\par
00044                 {\cf19 case} {\cf22 " A"} -> \{\par
00045                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 2"})) \{ {\cf20 // If the current card is an Ace, the next card must be a 2}\par
00046                         this.deck.add(cardIn);\par
00047                         {\cf19 return} {\cf17 null};\par
00048                     \}\par
00049                     {\cf19 break};\par
00050                 \}\par
00051                 {\cf19 case} {\cf22 " 2"} -> \{\par
00052                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 3"})) \{ {\cf20 // If the current card is a 2, the next card must be a 3}\par
00053                         this.deck.add(cardIn);\par
00054                         {\cf19 return} {\cf17 null};\par
00055                     \}\par
00056                     {\cf19 break};\par
00057                 \}\par
00058                 {\cf19 case} {\cf22 " 3"} -> \{\par
00059                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 4"})) \{ {\cf20 //... and so on}\par
00060                         this.deck.add(cardIn);\par
00061                         {\cf19 return} {\cf17 null};\par
00062                     \}\par
00063                     {\cf19 break};\par
00064                 \}\par
00065                 {\cf19 case} {\cf22 " 4"} -> \{\par
00066                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 5"})) \{\par
00067                         this.deck.add(cardIn);\par
00068                         {\cf19 return} {\cf17 null};\par
00069                     \}\par
00070                     {\cf19 break};\par
00071                 \}\par
00072                 {\cf19 case} {\cf22 " 5"} -> \{\par
00073                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 6"})) \{\par
00074                         this.deck.add(cardIn);\par
00075                         {\cf19 return} {\cf17 null};\par
00076                     \}\par
00077                     {\cf19 break};\par
00078                 \}\par
00079                 {\cf19 case} {\cf22 " 6"} -> \{\par
00080                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 7"})) \{\par
00081                         this.deck.add(cardIn);\par
00082                         {\cf19 return} {\cf17 null};\par
00083                     \}\par
00084                     {\cf19 break};\par
00085                 \}\par
00086                 {\cf19 case} {\cf22 " 7"} -> \{\par
00087                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 8"})) \{\par
00088                         this.deck.add(cardIn);\par
00089                         {\cf19 return} {\cf17 null};\par
00090                     \}\par
00091                     {\cf19 break};\par
00092                 \}\par
00093                 {\cf19 case} {\cf22 " 8"} -> \{\par
00094                     {\cf19 if} (cardIn.getRank().equals({\cf22 " 9"})) \{\par
00095                         this.deck.add(cardIn);\par
00096                         {\cf19 return} {\cf17 null};\par
00097                     \}\par
00098                     {\cf19 break};\par
00099                 \}\par
00100                 {\cf19 case} {\cf22 " 9"} -> \{\par
00101                     {\cf19 if} (cardIn.getRank().equals({\cf22 "10"})) \{\par
00102                         this.deck.add(cardIn);\par
00103                         {\cf19 return} {\cf17 null};\par
00104                     \}\par
00105                     {\cf19 break};\par
00106                 \}\par
00107                 {\cf19 case} {\cf22 "10"} -> \{\par
00108                     {\cf19 if} (cardIn.getRank().equals({\cf22 " J"})) \{\par
00109                         this.deck.add(cardIn);\par
00110                         {\cf19 return} {\cf17 null};\par
00111                     \}\par
00112                     {\cf19 break};\par
00113                 \}\par
00114                 {\cf19 case} {\cf22 " J"} -> \{\par
00115                     {\cf19 if} (cardIn.getRank().equals({\cf22 " Q"})) \{\par
00116                         this.deck.add(cardIn);\par
00117                         {\cf19 return} {\cf17 null};\par
00118                     \}\par
00119                     {\cf19 break};\par
00120                 \}\par
00121                 {\cf19 case} {\cf22 " Q"} -> \{\par
00122                     {\cf19 if} (cardIn.getRank().equals({\cf22 " K"})) \{\par
00123                         this.deck.add(cardIn);\par
00124                         {\cf19 return} {\cf17 null};\par
00125                     \}\par
00126                     {\cf19 break};\par
00127                 \}\par
00128                 {\cf19 default} -> \{\par
00129                     {\cf19 return} cardIn; {\cf20 // If the card does not follow the correct order, the card is returned}\par
00130                 \}\par
00131             \}\par
00132         \}\par
00133         {\cf19 return} cardIn; {\cf20 // If the card does not match the associated suit, the card is returned}\par
00134     \}\par
00135 \par
00141     {\cf17 public} {\cf18 int} getDeckSize() \{ {\cf20 // Method to get the size of the deck}\par
00142         {\cf19 return} this.deck.size();\par
00143     \}\par
00144 \par
00145 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Card.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Card.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Card.java}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Card}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Card.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Card.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Card.java}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*Card class which represents a given card, this is never extended on but is stored in array lists in each deck class*/}\par
00002 {\cf17 public} {\cf17 class }Card \{\par
00003     {\cf17 private} {\cf17 final} String rank; {\cf20 // String to store the rank of the card, FINAL because it should not be changed}\par
00004     {\cf17 private} {\cf17 final} String suit; {\cf20 // String to store the suit of the card, FINAL because it should not be changed}\par
00005     {\cf17 private} {\cf17 final} {\cf18 int} numValue;  {\cf20 // Integer to store the numerical value of the card, FINAL because it should not be changed}\par
00006     {\cf17 private} Boolean isShown; {\cf20 // Boolean to check if the card is shown}\par
00007     {\cf17 private} Boolean isUnder; {\cf20 // Boolean to check if the card is under another card}\par
00008 \par
00015     {\cf17 public} Card(String rank, String suit) \{\par
00016         this.rank = rank; {\cf20 // Set the rank of the card}\par
00017         this.suit = suit; {\cf20 // Set the suit of the card}\par
00018         this.numValue = {\cf19 switch} (rank) \{ {\cf20 // Switch statement to set the numerical value of the card}\par
00019             {\cf19 case} {\cf22 " A"} -> 1;\par
00020             {\cf19 case} {\cf22 " 2"} -> 2;\par
00021             {\cf19 case} {\cf22 " 3"} -> 3;\par
00022             {\cf19 case} {\cf22 " 4"} -> 4;\par
00023             {\cf19 case} {\cf22 " 5"} -> 5;\par
00024             {\cf19 case} {\cf22 " 6"} -> 6;\par
00025             {\cf19 case} {\cf22 " 7"} -> 7;\par
00026             {\cf19 case} {\cf22 " 8"} -> 8;\par
00027             {\cf19 case} {\cf22 " 9"} -> 9;\par
00028             {\cf19 case} {\cf22 "10"} -> 10;\par
00029             {\cf19 case} {\cf22 " J"} -> 11;\par
00030             {\cf19 case} {\cf22 " Q"} -> 12;\par
00031             {\cf19 case} {\cf22 " K"} -> 13;\par
00032             {\cf19 default} -> 0;\par
00033         \};\par
00034         this.isShown = {\cf17 false}; {\cf20 // Set the card to be hidden by default}\par
00035         this.isUnder = {\cf17 true}; {\cf20 // Set the card to be under another card by default}\par
00036     \}\par
00037 \par
00038 \par
00039     {\cf20 // Getters for the Card class}\par
00040     {\cf17 public} String getRank() \{\par
00041         {\cf19 return} rank;\par
00042     \}\par
00043 \par
00044     {\cf17 public} String getSuit() \{\par
00045         {\cf19 return} suit;\par
00046     \}\par
00047 \par
00048     {\cf17 public} {\cf18 int} getNumValue() \{\par
00049         {\cf19 return} numValue;\par
00050     \}\par
00051 \par
00052     {\cf17 public} Boolean isShown() \{\par
00053         {\cf19 return} isShown;\par
00054     \}\par
00055 \par
00056     {\cf17 public} Boolean isUnder() \{\par
00057         {\cf19 return} isUnder;\par
00058     \}\par
00059 \par
00060     {\cf20 // Setters for the Card class}\par
00061     {\cf17 public} {\cf18 void} show() \{\par
00062         isShown = {\cf17 true};\par
00063     \}\par
00064 \par
00065     {\cf17 public} {\cf18 void} hide() \{\par
00066         isShown = {\cf17 false};\par
00067     \} \par
00068     \par
00069     {\cf17 public} {\cf18 void} over() \{\par
00070         isUnder = {\cf17 false};\par
00071     \}\par
00072     \par
00073     {\cf17 public} {\cf18 void} under() \{\par
00074         isUnder = {\cf17 true};\par
00075     \}\par
00076 \par
00077 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Deck.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Deck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Deck.java}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 import java.util.ArrayList;}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Deck}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Deck.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Deck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Deck.java}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00002 {\cf17 import} java.util.ArrayList;\par
00003 {\cf17 import} java.util.Collections;\par
00004 \par
00010 {\cf17 public} {\cf17 class }Deck \{\par
00011 \par
00012     ArrayList<Card> deck = {\cf17 new} ArrayList<>(); {\cf20 // ArrayList to store the cards in the deck}\par
00013 \par
00017     {\cf17 public} {\cf18 void} defineCards() \{\par
00018         {\cf19 for} (String suit : {\cf17 new} String[]\{{\cf22 "H"}, {\cf22 "D"}, {\cf22 "C"}, {\cf22 "S"}\}) \{ {\cf20 // Loop through the suits}\par
00019             {\cf19 for} (String rank : {\cf17 new} String[]\{{\cf22 " 2"}, {\cf22 " 3"}, {\cf22 " 4"}, {\cf22 " 5"}, {\cf22 " 6"}, {\cf22 " 7"}, {\cf22 " 8"}, {\cf22 " 9"}, {\cf22 "10"}, {\cf22 " J"}, {\cf22 " Q"}, {\cf22 " K"}, {\cf22 " A"}\}) \{ {\cf20 // Loop through the ranks}\par
00020                 deck.add({\cf17 new} Card(rank, suit)); {\cf20 // Add a new card to the deck}\par
00021             \}\par
00022         \}\par
00023     \}\par
00024 \par
00028     {\cf17 public} {\cf18 void} shuffleDeck() \{\par
00029         Collections.shuffle(deck); {\cf20 // Shuffle the deck using the Collections java utility}\par
00030         deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00031     \}\par
00032 \par
00033     \par
00038     {\cf17 public} Card takeCard() \{\par
00039         {\cf19 if} (!deck.isEmpty()) \{ {\cf20 // If the deck is not empty}\par
00040             Card topCard = deck.getLast(); {\cf20 // Get the last card in the deck}\par
00041             deck.removeLast(); {\cf20 // Remove the last card from the deck}\par
00042             {\cf19 if} (!deck.isEmpty()) \{ {\cf20 // If the deck is not empty}\par
00043                 deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00044             \}\par
00045             {\cf19 return} topCard; {\cf20 // Return the last card}\par
00046         \} {\cf19 else} \{\par
00047             {\cf19 return} {\cf17 null}; {\cf20 // Return null if the deck is empty}\par
00048         \}\par
00049     \}\par
00050 \par
00055     {\cf17 public} {\cf18 void} addCard(Card cardIn) \{ \par
00056         {\cf19 if} (!deck.isEmpty()) \{ {\cf20 // If the deck is not empty}\par
00057             deck.getLast().under(); {\cf20 // Set the last card to be under}\par
00058         \}\par
00059         deck.add(cardIn); {\cf20 // Add the card to the deck}\par
00060         deck.getLast().over(); {\cf20 // Set the card to be over}\par
00061     \}\par
00062 \par
00068     {\cf17 public} {\cf18 void} refillDeck(Deck deckIn) \{\par
00069             {\cf19 for} (Card card : deckIn.deck) \{ {\cf20 // For each card in the deck}\par
00070             card.under(); {\cf20 // Set the card to be under}\par
00071             card.hide(); {\cf20 // Hide the card}\par
00072             this.deck.add(card); {\cf20 // Add the card to the deck}\par
00073         \}\par
00074         Collections.reverse(this.deck); {\cf20 // Reverse the deck using the Collections java utility}\par
00075         this.deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00076     \}\par
00077 \par
00085     {\cf17 public} String printDeck({\cf18 int} line) \{\par
00086         String output = {\cf22 ""}; {\cf20 // String to store the output}\par
00087         {\cf19 if} (deck.size() > line / 3) \{ {\cf20 // If the deck has more cards than the line number has selected}\par
00088             Card card = deck.get(line / 3); {\cf20 // Get the card at the index of the line number divided by 3}\par
00089             {\cf19 if} (card.isShown()) \{ {\cf20 // If the card is shown}\par
00090                 {\cf19 if} (card.isUnder()) \{ {\cf20 // If the card is under}\par
00091                     {\cf19 switch} (line % 3) \{ {\cf20 // Switch statement to print the card by using modulo 3, devide the card into 3 lines}\par
00092                         {\cf19 case} 0 -> {\cf20 // If the line number is 0}\par
00093                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00094                         {\cf19 case} 1 -> {\cf20 // If the line number is 1}\par
00095                             output = {\cf22 "|-"} + card.getRank() + card.getSuit() + {\cf22 "-|"}; {\cf20 // Print the rank and suit of the card}\par
00096                         {\cf19 case} 2 -> {\cf20 // If the line number is 2}\par
00097                             output = {\cf22 "       "}; {\cf20 // Print an empty line as a card is 'over' this card as is 'under'}\par
00098                     \}\par
00099                 \} {\cf19 else} \{ {\cf20 // If the card is not under}\par
00100                     {\cf19 switch} (line % 3) \{ {\cf20 // Switch statement to print the card by using modulo 3, devide the card into 3 lines}\par
00101                         {\cf19 case} 0 -> {\cf20 // If the line number is 0}\par
00102                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00103                         {\cf19 case} 1 -> {\cf20 // If the line number is 1}\par
00104                             output = {\cf22 "|-"} + card.getRank() + card.getSuit() + {\cf22 "-|"}; {\cf20 // Print the rank and suit of the card}\par
00105                         {\cf19 case} 2 -> {\cf20 // If the line number is 2}\par
00106                             output = {\cf22 "+-----+"}; {\cf20 // Print the bottom of the card}\par
00107                     \}\par
00108                 \}\par
00109             \} {\cf19 else} \{ {\cf20 // If the card is not shown and is under}\par
00110                 {\cf19 if} (card.isUnder()) \{ {\cf20 // If the card is under}\par
00111                     {\cf19 switch} (line % 3) \{ \par
00112                         {\cf19 case} 0 -> \par
00113                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00114                         {\cf19 case} 1 ->\par
00115                             output = {\cf22 "|-xxx-|"}; {\cf20 // Print the card as 'xxx' as its the back of the card}\par
00116                         {\cf19 case} 2 ->\par
00117                             output = {\cf22 "       "}; {\cf20 // Print an empty line as a card is 'over' this card as is 'under'}\par
00118                     \}\par
00119                 \} {\cf19 else} \{ {\cf20 // If the card is not under but is not shown}\par
00120                     {\cf19 switch} (line % 3) \{\par
00121                         {\cf19 case} 0 ->\par
00122                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00123                         {\cf19 case} 1 ->\par
00124                             output = {\cf22 "|-xxx-|"}; {\cf20 // Print the card as 'xxx' as its the back of the card}\par
00125                         {\cf19 case} 2 ->\par
00126                             output = {\cf22 "+-----+"}; {\cf20 // Print the bottom of the card}\par
00127                     \}\par
00128                 \}\par
00129             \}\par
00130         \} {\cf19 else} \{\par
00131             output = {\cf22 "       "}; {\cf20 // If we have run out of cards to print, print an empty line to keep the formatting}\par
00132         \}\par
00133         {\cf19 return} output; {\cf20 // Return the output}\par
00134     \}\par
00135 \par
00142     {\cf17 public} String printTopCard({\cf18 int} line) \{\par
00143         String output = {\cf22 ""}; {\cf20 // String to store the output}\par
00144         {\cf19 if} (deck.isEmpty()) \{ {\cf20 // If the deck is empty}\par
00145             output = {\cf22 "       "}; {\cf20 // Print an empty line as this will always be the case for an empty deck}\par
00146             {\cf19 return} output; {\cf20 // Return the output}\par
00147         \}\par
00148         Card card = deck.getLast(); {\cf20 // Get the last card in the deck}\par
00149         {\cf19 if} (line < 3) \{ {\cf20 // If the line number is less than 3}\par
00150             {\cf19 if} (card.isShown()) \{ {\cf20 // If the card is shown}\par
00151                 {\cf19 if} (card.isUnder()) \{ {\cf20 // If the card is under}\par
00152                     {\cf19 switch} (line) \{ {\cf20 // Switch statement to print the card by using the line number}\par
00153                         {\cf19 case} 0 -> \{\par
00154                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00155                         \}\par
00156                         {\cf19 case} 1 -> \{\par
00157                             output = {\cf22 "|-"} + card.getRank() + card.getSuit() + {\cf22 "-|"}; {\cf20 // Print the rank and suit of the card}\par
00158                         \}\par
00159                         {\cf19 case} 2 -> \{\par
00160                             output = {\cf22 ""}; {\cf20 // Print an empty line as the card is 'under', this should never happen but is included for visual identification of a hypothetical bug}\par
00161                         \}\par
00162                     \}\par
00163                 \} {\cf19 else} \{ {\cf20 // If the card is not under (Should always be the case)}\par
00164                     {\cf19 switch} (line) \{ {\cf20 // Switch statement to print the card by using the line number}\par
00165                         {\cf19 case} 0 -> \{\par
00166                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00167                         \}\par
00168                         {\cf19 case} 1 -> \{\par
00169                             output = {\cf22 "|-"} + card.getRank() + card.getSuit() + {\cf22 "-|"}; {\cf20 // Print the rank and suit of the card}\par
00170                         \}\par
00171                         {\cf19 case} 2 -> \{\par
00172                             output = {\cf22 "+-----+"}; {\cf20 // Print the bottom of the card}\par
00173                         \}\par
00174                     \}\par
00175                 \}\par
00176             \} {\cf19 else} \{ {\cf20 // If the card is not shown}\par
00177                 {\cf19 if} (card.isUnder()) \{  {\cf20 // If the card is under (Should never be the case)}\par
00178                     {\cf19 switch} (line) \{\par
00179                         {\cf19 case} 0 -> \{\par
00180                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00181                         \}\par
00182                         {\cf19 case} 1 -> \{\par
00183                             output = {\cf22 "|-xxx-|"}; {\cf20 // Print the card as 'xxx' as its the back of the card}\par
00184                         \}\par
00185                         {\cf19 case} 2 -> \{\par
00186                             output = {\cf22 ""}; {\cf20 // Print an empty line as the card is 'under', this should never happen but is included for visual identification of a hypothetical bug}\par
00187                         \}\par
00188                     \}\par
00189                 \} {\cf19 else} \{ {\cf20 // If the card is not under but is not shown (Should always be the case if the card is not shown)}\par
00190                     {\cf19 switch} (line) \{ \par
00191                         {\cf19 case} 0 -> \{\par
00192                             output = {\cf22 "+-----+"}; {\cf20 // Print the top of the card}\par
00193                         \}\par
00194                         {\cf19 case} 1 -> \{\par
00195                             output = {\cf22 "|-xxx-|"}; {\cf20 // Print the card as 'xxx' as its the back of the card}\par
00196                         \}\par
00197                         {\cf19 case} 2 -> \{\par
00198                             output = {\cf22 "+-----+"}; {\cf20 // Print the bottom of the card}\par
00199                         \}\par
00200                     \}\par
00201                 \}\par
00202             \}\par
00203         \} {\cf19 else} \{ {\cf20 // If the line number is greater than 3}\par
00204             output = {\cf22 ""};  {\cf20 // Print an empty line so that the formatting is maintained}\par
00205         \}\par
00206 \par
00207         {\cf19 return} output; {\cf20 // Return the output}\par
00208     \}\par
00209 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/DiscardDeck.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/DiscardDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/DiscardDeck.java}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DiscardDeck}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DiscardDeck.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/DiscardDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/DiscardDeck.java}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*DiscardDeck class extends Deck and represents the 'draw' pile */}\par
00002 {\cf17 public} {\cf17 class }DiscardDeck {\cf17 extends} Deck\{\par
00003     \par
00004     {\cf17 public} DiscardDeck() \{ {\cf20 // Constructor for DiscardDeck class}\par
00005         super();\par
00006     \}\par
00007 \par
00012     {\cf17 public} {\cf18 void} addCards(Deck deckIn) \{ {\cf20 // Method to add cards to the discard deck}\par
00013         {\cf19 if} (!this.deck.isEmpty()) \{ {\cf20 // If the deck is not empty}\par
00014             this.deck.getLast().under(); {\cf20 // Set the last card to be under}\par
00015         \}\par
00016         {\cf19 for}({\cf18 int} i = 0; i < 3 && !deckIn.deck.isEmpty(); i++)\{ {\cf20 // Loop to add 3 cards to the discard deck}\par
00017             Card inCard = deckIn.takeCard(); {\cf20 // Take a card from the deck }\par
00018             {\cf19 if} (inCard != {\cf17 null}) \{ {\cf20 // If the card is not null}\par
00019                 this.deck.add(inCard); {\cf20 // Add the card to the discard deck}\par
00020                 this.deck.getLast().show(); {\cf20 // Show the card}\par
00021                 this.deck.getLast().under(); {\cf20 // Set the card to be under}\par
00022             \}\par
00023         \}\par
00024         this.deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00025     \}\par
00026 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Main.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Main.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Main.java}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 import java.util.ArrayList;}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Main}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Main.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Main.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/Main.java}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // Sam Byers - 2024}\par
00002 {\cf20 // JAVA Solitaire Game}\par
00003 {\cf20 // This main class is the main driver for the game. All game logic is handled here.}\par
00004 \par
00005 {\cf17 import} java.util.ArrayList;\par
00006 {\cf17 import} java.util.Scanner;\par
00007 \par
00008 {\cf17 public} {\cf17 class }Main \{\par
00009 \par
00010     {\cf17 public} {\cf17 static} {\cf18 void} main(String[] args) \{\par
00011         ScoreSystem score = {\cf17 new} ScoreSystem(); {\cf20 // ScoreSystem object to handle the scoring of the game}\par
00012         Card heldCard; {\cf20 // The card that is currently being held by the player}\par
00013         var deck = {\cf17 new} Deck(); {\cf20 // The main deck that cards are drawn from}\par
00014         var bufferDeck = {\cf17 new} Deck(); {\cf20 // A temporary deck to store cards that are being moved as a stack}\par
00015         var discardPileBuffer = {\cf17 new} Deck(); {\cf20 // A temporary deck to store the discard pile's top 3 cards for display when the discard pile has more than 3 cards}\par
00016         var discardPile = {\cf17 new} DiscardDeck(); {\cf20 // The discard pile where cards are placed after being drawn from the deck}\par
00017         var spadeBuild = {\cf17 new} BuildDeck({\cf22 "S"}); {\cf20 // The build deck for spades}\par
00018         var clubBuild = {\cf17 new} BuildDeck({\cf22 "C"}); {\cf20 // The build deck for clubs}\par
00019         var heartBuild = {\cf17 new} BuildDeck({\cf22 "H"}); {\cf20 // The build deck for hearts}\par
00020         var diamondBuild = {\cf17 new} BuildDeck({\cf22 "D"}); {\cf20 // The build deck for diamonds}\par
00021         Scanner scanner = {\cf17 new} Scanner(System.in); {\cf20 // Scanner object to get user input that is passed to the UserInputScanner class}\par
00022         UserInputScanner uInput = {\cf17 new} UserInputScanner(); {\cf20 // UserInputScanner object to handle user input}\par
00023         String displayRowString; {\cf20 // String to store the row of cards to display}\par
00024         String sourceString = {\cf22 ""}; {\cf20 // String to store the source of the card being moved, so that they can be placed back if the move is invalid}\par
00025         String[] moveInput; {\cf20 // Array to store the user input, source, destination, number of cards}\par
00026         {\cf18 int} indxVal; {\cf20 // Integer to store the index of the card to grab the stack from when moving a stack of cards}\par
00027 \par
00028         ArrayList<TableDeck> tableDecks = {\cf17 new} ArrayList<>(); {\cf20 // Array list to store the table decks, the 7 decks where cards are moved to and from when playing the game}\par
00029 \par
00030         deck.defineCards(); {\cf20 // Define the cards in the deck, 52 cards in total are defined here in deck}\par
00031         deck.shuffleDeck(); {\cf20 // Shuffle the deck so that the cards are in a random order}\par
00032         {\cf19 for} ({\cf18 int} i = 0; i < 7; i++) \{ {\cf20 // Loop to create the 7 table decks}\par
00033             tableDecks.add({\cf17 new} TableDeck());\par
00034             tableDecks.get(i).initalFill(i + 1, deck); {\cf20 // Fill the table decks with the appropriate number of cards from the main deck}\par
00035         \}\par
00036 \par
00037         {\cf19 while} (spadeBuild.getDeckSize() + clubBuild.getDeckSize() + heartBuild.getDeckSize() + diamondBuild.getDeckSize() < 52) \{ {\cf20 // Main game loop starts here, this code runs until the game is quit or won}\par
00038             {\cf19 for} (TableDeck tableDeck : tableDecks) \{ {\cf20 // Loop through the table decks at the start of a turn}\par
00039                 tableDeck.revealCardCheck(); {\cf20 // Reveal the top card of the deck and check if there is a stack of cards}\par
00040             \}\par
00041             System.out.println({\cf22 "\\n Time elapsed: "} + score.elapedTime() + {\cf22 " Score: "} + score.getScore() + {\cf22 "\\n"}); {\cf20 // Print the time elapsed since the game started}\par
00042             System.out.println({\cf22 "\\n\\n-DECK-|-SPADE-|-CLUB-|-HEART|-DIAM|  "}); {\cf20 // Print an interface element to show the player where the build decks are}\par
00043             {\cf19 for} ({\cf18 int} i = 0; i < 3; i++) \{ {\cf20 // 3 lines to print a top card for the decks that print in top card mode}\par
00044 \par
00045                 displayRowString = {\cf22 ""}; {\cf20 // String to store the row of cards to display is set to empty}\par
00046                 displayRowString += deck.printTopCard(i); {\cf20 // Add the top card of the deck to the display row string}\par
00047                 displayRowString += spadeBuild.printTopCard(i); {\cf20 // Add the top card of the spade build deck to the display row string}\par
00048                 displayRowString += clubBuild.printTopCard(i); {\cf20 // Add the top card of the club build deck to the display row string}\par
00049                 displayRowString += heartBuild.printTopCard(i); {\cf20 // Add the top card of the heart build deck to the display row string}\par
00050                 displayRowString += diamondBuild.printTopCard(i); {\cf20 // Add the top card of the diamond build deck to the display row string}\par
00051 \par
00052                 System.out.println(displayRowString); {\cf20 // Print the display row string}\par
00053 \par
00054             \}\par
00055             System.out.println({\cf22 "DISCARD|--A--||--B--||--C--||--D--||--E--||--F--||--G--|"}); {\cf20 // Print an interface element to show the player where the table decks are}\par
00056             {\cf19 for} ({\cf18 int} i = 0; i < 72; i++) \{ {\cf20 // Loop to print the table decks, this game supports up to 24 cards in a given row}\par
00057                 displayRowString = {\cf22 ""}; {\cf20 // String to store the row of cards to display is set to empty}\par
00058                 {\cf19 if} (discardPile.deck.size() < 3) \{ {\cf20 // If the discard pile has less than 3 cards}\par
00059                     displayRowString += discardPile.printDeck(i); {\cf20 // We can print the discard pile as normal}\par
00060                 \} {\cf19 else} \{ {\cf20 // If the discard pile has more than 3 cards}\par
00061                     discardPileBuffer.deck.clear(); {\cf20 // Clear the discard pile buffer}\par
00062                     discardPileBuffer.addCard(discardPile.deck.get(discardPile.deck.size() - 3)); {\cf20 // Add the 3rd last card to the buffer}\par
00063                     discardPileBuffer.addCard(discardPile.deck.get(discardPile.deck.size() - 2)); {\cf20 // Add the 2nd last card to the buffer}\par
00064                     discardPileBuffer.addCard(discardPile.deck.get(discardPile.deck.size() - 1)); {\cf20 // Add the last card to the buffer}\par
00065                     displayRowString += discardPileBuffer.printDeck(i); {\cf20 // Print the buffer instead of the discard pile}\par
00066                 \}\par
00067 \par
00068                 {\cf19 for} ({\cf18 int} j = 0; j < 7; j++) \{ {\cf20 // Loop through the table decks}\par
00069                     displayRowString += tableDecks.get(j).printDeck(i); {\cf20 // Print the line from each of the table decks}\par
00070                 \}\par
00071                 {\cf19 if} (!displayRowString.equals({\cf22 "                                                        "})) \{ {\cf20 // If a row is not empty, if it is empty we don't need to print it to save screen space}\par
00072                     System.out.println(displayRowString); {\cf20 // Print the row}\par
00073                 \}\par
00074             \}\par
00075 \par
00076             heldCard = {\cf17 null}; {\cf20 // Set the held card to null so that we do not accidentally override a move stack operation}\par
00077             bufferDeck.deck.clear(); {\cf20 // Clear the buffer deck so that we do not accidentally override a move card operation}\par
00078             scanner.reset(); {\cf20 // Reset the scanner so that we can get new input (Likely not needed)}\par
00079             moveInput = {\cf17 null}; {\cf20 // Set the move input to null so that we can get new input}\par
00080             {\cf19 while} (moveInput == {\cf17 null}) \{ {\cf20 // Loop to get the user input for the move}\par
00081                 moveInput = uInput.makeMove(scanner); {\cf20 // Get the user input for the move}\par
00082             \}\par
00083             {\cf19 switch} (moveInput[0]) \{ {\cf20 // Switch statement to handle the user inputs first term, the source of the card to move}\par
00084                 {\cf19 case} {\cf22 "q"} -> \{ {\cf20 // If the user input is 'q', quit the game}\par
00085                     System.out.println({\cf22 "You quit! Goodbye!"}); {\cf20 // Print a quit message}\par
00086                     System.out.println({\cf22 "Final Score: "} + score.getScore()); {\cf20 // Print the final score}\par
00087                     System.out.println({\cf22 "Cards left: "} + (52-(spadeBuild.getDeckSize() + clubBuild.getDeckSize() + heartBuild.getDeckSize() + diamondBuild.getDeckSize()))); {\cf20 // Print the number of cards left}\par
00088                     System.out.println({\cf22 "Time Spent: "} + score.elapedTime()); {\cf20 // Print the time spent}\par
00089                     {\cf19 return};\par
00090                 \}\par
00091                 {\cf19 case} {\cf22 "de"} -> \{ {\cf20 // If the user input is 'de', draw 3 cards from the deck}\par
00092                     {\cf19 if} (deck.deck.isEmpty()) \{ {\cf20 // If the deck is empty}\par
00093                         deck.refillDeck(discardPile); {\cf20 // Refill the deck from the discard pile}\par
00094                         discardPile.deck.clear(); {\cf20 // Clear the discard pile}\par
00095                     \} {\cf19 else} \{ {\cf20 // If the deck is not empty}\par
00096                         discardPile.addCards(deck); {\cf20 // Add 3 cards to the discard pile from the deck}\par
00097                     \}\par
00098                     heldCard = {\cf17 null}; {\cf20 // Set the held card to null as we have not drawn a card}\par
00099                 \}\par
00100                 {\cf19 case} {\cf22 "di"} -> \{ {\cf20 // if the user input is 'di', take the top card from the discard pile}\par
00101                     heldCard = discardPile.takeCard(); {\cf20 // Take the top card from the discard pile}\par
00102                     sourceString = {\cf22 "Discard"}; {\cf20 // Set the source string to 'Discard'}\par
00103                 \}\par
00104                 {\cf19 case} {\cf22 "a"} -> \{ {\cf20 // If the user input is 'a', take the top card from table deck A}\par
00105                     {\cf19 if} (tableDecks.get(0).hasStack) \{ {\cf20 // If table deck A has a stack of cards}\par
00106                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{ {\cf20 // If the user input is 'Choose', ie the user has not specifed the number of cards to move, prompt the user to choose the number of cards}\par
00107                             indxVal = uInput.pickIndex(scanner, tableDecks.get(0)); {\cf20 // Get the index of the card to grab the stack from, from the user}\par
00108                             {\cf19 if} (indxVal == -1) \{ {\cf20 // If the index is -1, the user has cancelled the move or entered an invalid index}\par
00109                                 {\cf19 break};  {\cf20 // Break out of the switch statement}\par
00110                             \}\par
00111                             bufferDeck = tableDecks.get(0).grabStack(indxVal); {\cf20 // Grab the stack of cards from the table deck}\par
00112                         \} {\cf19 else} \{ {\cf20 // If the user has specified the number of cards to move}\par
00113                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(0));  {\cf20 // Get the index of the card to grab the stack from, from the previously obtained user input}\par
00114                             {\cf19 if} (indxVal == -1) \{ {\cf20 // If the index is -1, the user has cancelled the move or entered an invalid index}\par
00115                                 {\cf19 break}; {\cf20 // Break out of the switch statement}\par
00116                             \}\par
00117                             bufferDeck = tableDecks.get(0).grabStack(indxVal); {\cf20 // Grab the stack of cards from the table deck}\par
00118                         \}\par
00119                         {\cf19 if} (bufferDeck.deck.size() == 1) \{ {\cf20 // If the stack of cards is only 1 card}\par
00120                             heldCard = bufferDeck.takeCard(); {\cf20 // Take the card from the stack so that we can process it as a single card}\par
00121                             bufferDeck.deck.clear(); {\cf20 // thus we can clear the buffer deck}\par
00122                         \} {\cf19 else} \{ {\cf20 // If the stack of cards is more than 1 card}\par
00123                             heldCard = {\cf17 null}; {\cf20 // Set the held card to null so that we do not accidentally override a move stack operation}\par
00124                         \}\par
00125                     \} {\cf19 else} \{ {\cf20 // If table deck A does not have a stack of cards}\par
00126                         heldCard = tableDecks.get(0).takeCard(); {\cf20 // Take the top card from table deck A}\par
00127                         bufferDeck.deck.clear(); {\cf20 // Clear the buffer deck so that we do not accidentally override a move card operation}\par
00128                     \}\par
00129                     sourceString = {\cf22 "Table A"}; {\cf20 // Set the source string to 'Table A'}\par
00130                 \}\par
00131                 {\cf20 // This code is repeated for each of the table decks, A-G}\par
00132                 {\cf19 case} {\cf22 "b"} -> \{\par
00133                     {\cf19 if} (tableDecks.get(1).hasStack) \{\par
00134                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00135                             indxVal = uInput.pickIndex(scanner, tableDecks.get(1));\par
00136                             {\cf19 if} (indxVal == -1) \{\par
00137                                 {\cf19 break};\par
00138                             \}\par
00139                             bufferDeck = tableDecks.get(1).grabStack(indxVal);\par
00140                         \} {\cf19 else} \{\par
00141                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(1));\par
00142                             {\cf19 if} (indxVal == -1) \{\par
00143                                 {\cf19 break};\par
00144                             \}\par
00145                             bufferDeck = tableDecks.get(1).grabStack(indxVal);\par
00146                         \}\par
00147                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00148                             heldCard = bufferDeck.takeCard();\par
00149                             bufferDeck.deck.clear();\par
00150                         \} {\cf19 else} \{\par
00151                             heldCard = {\cf17 null};\par
00152                         \}\par
00153                     \} {\cf19 else} \{\par
00154                         heldCard = tableDecks.get(1).takeCard();\par
00155                         bufferDeck.deck.clear();\par
00156                     \}\par
00157                     sourceString = {\cf22 "Table B"};\par
00158                 \}\par
00159                 {\cf19 case} {\cf22 "c"} -> \{\par
00160                     {\cf19 if} (tableDecks.get(2).hasStack) \{\par
00161                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00162                             indxVal = uInput.pickIndex(scanner, tableDecks.get(2));\par
00163                             {\cf19 if} (indxVal == -1) \{\par
00164                                 {\cf19 break};\par
00165                             \}\par
00166                             bufferDeck = tableDecks.get(2).grabStack(indxVal);\par
00167                         \} {\cf19 else} \{\par
00168                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(2));\par
00169                             {\cf19 if} (indxVal == -1) \{\par
00170                                 {\cf19 break};\par
00171                             \}\par
00172                             bufferDeck = tableDecks.get(2).grabStack(indxVal);\par
00173                         \}\par
00174                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00175                             heldCard = bufferDeck.takeCard();\par
00176                             bufferDeck.deck.clear();\par
00177                         \} {\cf19 else} \{\par
00178                             heldCard = {\cf17 null};\par
00179                         \}\par
00180                     \} {\cf19 else} \{\par
00181                         heldCard = tableDecks.get(2).takeCard();\par
00182                         bufferDeck.deck.clear();\par
00183                     \}\par
00184                     sourceString = {\cf22 "Table C"};\par
00185                 \}\par
00186                 {\cf19 case} {\cf22 "d"} -> \{\par
00187                     {\cf19 if} (tableDecks.get(3).hasStack) \{\par
00188                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00189                             indxVal = uInput.pickIndex(scanner, tableDecks.get(3));\par
00190                             {\cf19 if} (indxVal == -1) \{\par
00191                                 {\cf19 break};\par
00192                             \}\par
00193                             bufferDeck = tableDecks.get(3).grabStack(indxVal);\par
00194                         \} {\cf19 else} \{\par
00195                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(3));\par
00196                             {\cf19 if} (indxVal == -1) \{\par
00197                                 {\cf19 break};\par
00198                             \}\par
00199                             bufferDeck = tableDecks.get(3).grabStack(indxVal);\par
00200                         \}\par
00201                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00202                             heldCard = bufferDeck.takeCard();\par
00203                             bufferDeck.deck.clear();\par
00204                         \} {\cf19 else} \{\par
00205                             heldCard = {\cf17 null};\par
00206                         \}\par
00207                     \} {\cf19 else} \{\par
00208                         heldCard = tableDecks.get(3).takeCard();\par
00209                         bufferDeck.deck.clear();\par
00210                     \}\par
00211                     sourceString = {\cf22 "Table D"};\par
00212                 \}\par
00213                 {\cf19 case} {\cf22 "e"} -> \{\par
00214                     {\cf19 if} (tableDecks.get(4).hasStack) \{\par
00215                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00216                             indxVal = uInput.pickIndex(scanner, tableDecks.get(4));\par
00217                             {\cf19 if} (indxVal == -1) \{\par
00218                                 {\cf19 break};\par
00219                             \}\par
00220                             bufferDeck = tableDecks.get(4).grabStack(indxVal);\par
00221                         \} {\cf19 else} \{\par
00222                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(4));\par
00223                             {\cf19 if} (indxVal == -1) \{\par
00224                                 {\cf19 break};\par
00225                             \}\par
00226                             bufferDeck = tableDecks.get(4).grabStack(indxVal);\par
00227                         \}\par
00228                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00229                             heldCard = bufferDeck.takeCard();\par
00230                             bufferDeck.deck.clear();\par
00231                         \} {\cf19 else} \{\par
00232                             heldCard = {\cf17 null};\par
00233                         \}\par
00234 \par
00235                     \} {\cf19 else} \{\par
00236                         heldCard = tableDecks.get(4).takeCard();\par
00237                         bufferDeck.deck.clear();\par
00238                     \}\par
00239                     sourceString = {\cf22 "Table E"};\par
00240                 \}\par
00241                 {\cf19 case} {\cf22 "f"} -> \{\par
00242                     {\cf19 if} (tableDecks.get(5).hasStack) \{\par
00243                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00244                             indxVal = uInput.pickIndex(scanner, tableDecks.get(5));\par
00245                             {\cf19 if} (indxVal == -1) \{\par
00246                                 {\cf19 break};\par
00247                             \}\par
00248                             bufferDeck = tableDecks.get(5).grabStack(indxVal);\par
00249                         \} {\cf19 else} \{\par
00250                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(5));\par
00251                             {\cf19 if} (indxVal == -1) \{\par
00252                                 {\cf19 break};\par
00253                             \}\par
00254                             bufferDeck = tableDecks.get(5).grabStack(indxVal);\par
00255                         \}\par
00256                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00257                             heldCard = bufferDeck.takeCard();\par
00258                             bufferDeck.deck.clear();\par
00259                         \} {\cf19 else} \{\par
00260                             heldCard = {\cf17 null};\par
00261                         \}\par
00262                     \} {\cf19 else} \{\par
00263                         heldCard = tableDecks.get(5).takeCard();\par
00264                         bufferDeck.deck.clear();\par
00265                     \}\par
00266                     sourceString = {\cf22 "Table F"};\par
00267                 \}\par
00268                 {\cf19 case} {\cf22 "g"} -> \{\par
00269                     {\cf19 if} (tableDecks.get(6).hasStack) \{\par
00270                         {\cf19 if} (moveInput[2].equals({\cf22 "Choose"})) \{\par
00271                             indxVal = uInput.pickIndex(scanner, tableDecks.get(6));\par
00272                             {\cf19 if} (indxVal == -1) \{\par
00273                                 {\cf19 break};\par
00274                             \}\par
00275                             bufferDeck = tableDecks.get(6).grabStack(indxVal);\par
00276                         \} {\cf19 else} \{\par
00277                             indxVal = uInput.loadIndx(moveInput[2], tableDecks.get(6));\par
00278                             {\cf19 if} (indxVal == -1) \{\par
00279                                 {\cf19 break};\par
00280                             \}\par
00281                             bufferDeck = tableDecks.get(6).grabStack(indxVal);\par
00282                         \}\par
00283                         {\cf19 if} (bufferDeck.deck.size() == 1) \{\par
00284                             heldCard = bufferDeck.takeCard();\par
00285                             bufferDeck.deck.clear();\par
00286                         \} {\cf19 else} \{\par
00287                             heldCard = {\cf17 null};\par
00288                         \}\par
00289                     \} {\cf19 else} \{\par
00290                         heldCard = tableDecks.get(6).takeCard();\par
00291                         bufferDeck.deck.clear();\par
00292                     \}\par
00293                     sourceString = {\cf22 "Table G"};\par
00294                 \}\par
00295                 {\cf19 default} ->\par
00296                     System.out.println({\cf22 "Invalid input"}); {\cf20 // If the user input is not valid, print an error message}\par
00297             \}\par
00298             {\cf19 if} (heldCard != {\cf17 null} && bufferDeck.deck.isEmpty()) \{ {\cf20 // If the held card is not null and the buffer deck is empty, we are moving a single card}\par
00299                 System.out.println({\cf22 "Held card: "} + heldCard.getRank() + heldCard.getSuit()); {\cf20 // Print the held card}\par
00300                 scanner.reset(); {\cf20 // Reset the scanner so that we can get new input (Likely not needed)}\par
00301                 {\cf19 switch} (moveInput[1]) \{ {\cf20 // Switch statement to handle the user inputs second term, the destination of the card we are moving}\par
00302                     {\cf19 case} {\cf22 "heart"} -> \{ {\cf20 // If the user input is 'heart', move the card to the heart build deck}\par
00303                         heldCard = heartBuild.playCard(heldCard); {\cf20 // Play the card to the heart build deck}\par
00304                         {\cf19 if} (heldCard != {\cf17 null}) \{ {\cf20 // If the card is not placed in the heart build deck, ie the move is invalid}\par
00305                             System.out.println({\cf22 "Invalid move. Card not placed in Hearts."}); {\cf20 // Print an error message}\par
00306                             {\cf19 switch} (sourceString) \{ {\cf20 // Switch statement to handle the source of the card we are moving}\par
00307                                 {\cf19 case} {\cf22 "Discard"} -> {\cf20 // If the source is the discard pile}\par
00308                                     discardPile.addCard(heldCard); {\cf20 // Add the card back to the discard pile}\par
00309                                 {\cf19 case} {\cf22 "Table A"} -> {\cf20 // If the source is table deck A}\par
00310                                     tableDecks.get(0).addCard(heldCard);  {\cf20 // Add the card back to table deck A}\par
00311                                 {\cf19 case} {\cf22 "Table B"} -> {\cf20 // If the source is table deck B}\par
00312                                     tableDecks.get(1).addCard(heldCard); {\cf20 // Add the card back to table deck B}\par
00313                                 {\cf19 case} {\cf22 "Table C"} -> {\cf20 // If the source is table deck C}\par
00314                                     tableDecks.get(2).addCard(heldCard); {\cf20 // Add the card back to table deck C}\par
00315                                 {\cf19 case} {\cf22 "Table D"} -> {\cf20 // If the source is table deck D }\par
00316                                     tableDecks.get(3).addCard(heldCard); {\cf20 // Add the card back to table deck D}\par
00317                                 {\cf19 case} {\cf22 "Table E"} -> {\cf20 // If the source is table deck E }\par
00318                                     tableDecks.get(4).addCard(heldCard); {\cf20 // Add the card back to table deck E}\par
00319                                 {\cf19 case} {\cf22 "Table F"} -> {\cf20 // If the source is table deck F}\par
00320                                     tableDecks.get(5).addCard(heldCard); {\cf20 // Add the card back to table deck F}\par
00321                                 {\cf19 case} {\cf22 "Table G"} -> {\cf20 // If the source is table deck G }\par
00322                                     tableDecks.get(6).addCard(heldCard); {\cf20 // Add the card back to table deck G}\par
00323                             \}\par
00324                         \} {\cf19 else} \{\par
00325                             {\cf19 if} (sourceString.equals({\cf22 "Discard"})) \{ {\cf20 // If the source is the discard pile}\par
00326                                 score.scoreFromDiscard(); {\cf20 // Score the move from the discard pile}\par
00327                             \} {\cf19 else} \{\par
00328                                 score.scoreFromTable(); {\cf20 // Score the move from a table deck}\par
00329                             \}\par
00330                         \}\par
00331                     \}\par
00332                     {\cf19 case} {\cf22 "diam"} -> \{ {\cf20 // If the user input is 'diam', move the card to the diamond build deck}\par
00333                         heldCard = diamondBuild.playCard(heldCard); {\cf20 // Play the card to the diamond build deck}\par
00334                         {\cf19 if} (heldCard != {\cf17 null}) \{ {\cf20 // If the card is not placed in the diamond build deck, ie the move is invalid}\par
00335                             System.out.println({\cf22 "Invalid move. Card not placed in Diamonds."}); {\cf20 // Print an error message}\par
00336                             {\cf19 switch} (sourceString) \{ {\cf20 // Switch statement to handle the source of the card we are moving, same as before}\par
00337                                 {\cf19 case} {\cf22 "Discard"} ->\par
00338                                     discardPile.addCard(heldCard);\par
00339                                 {\cf19 case} {\cf22 "Table A"} ->\par
00340                                     tableDecks.get(0).addCard(heldCard);\par
00341                                 {\cf19 case} {\cf22 "Table B"} ->\par
00342                                     tableDecks.get(1).addCard(heldCard);\par
00343                                 {\cf19 case} {\cf22 "Table C"} ->\par
00344                                     tableDecks.get(2).addCard(heldCard);\par
00345                                 {\cf19 case} {\cf22 "Table D"} ->\par
00346                                     tableDecks.get(3).addCard(heldCard);\par
00347                                 {\cf19 case} {\cf22 "Table E"} ->\par
00348                                     tableDecks.get(4).addCard(heldCard);\par
00349                                 {\cf19 case} {\cf22 "Table F"} ->\par
00350                                     tableDecks.get(5).addCard(heldCard);\par
00351                                 {\cf19 case} {\cf22 "Table G"} ->\par
00352                                     tableDecks.get(6).addCard(heldCard);\par
00353                             \}\par
00354                         \} {\cf19 else} \{\par
00355                             {\cf19 if} (sourceString.equals({\cf22 "Discard"})) \{ {\cf20 // If the source is the discard pile}\par
00356                                 score.scoreFromDiscard(); {\cf20 // Score the move from the discard pile}\par
00357                             \} {\cf19 else} \{\par
00358                                 score.scoreFromTable(); {\cf20 // Score the move from a table deck}\par
00359                             \}\par
00360                         \}\par
00361                     \}\par
00362                     {\cf20 // This code is repeated for each of the build decks, Hearts, Diamonds, Spades, Clubs and the table decks A-G}\par
00363                     {\cf19 case} {\cf22 "spade"} -> \{\par
00364                         heldCard = spadeBuild.playCard(heldCard);\par
00365                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00366                             System.out.println({\cf22 "Invalid move. Card not placed in Spades."});\par
00367                             {\cf19 switch} (sourceString) \{\par
00368                                 {\cf19 case} {\cf22 "Discard"} ->\par
00369                                     discardPile.addCard(heldCard);\par
00370                                 {\cf19 case} {\cf22 "Table A"} ->\par
00371                                     tableDecks.get(0).addCard(heldCard);\par
00372                                 {\cf19 case} {\cf22 "Table B"} ->\par
00373                                     tableDecks.get(1).addCard(heldCard);\par
00374                                 {\cf19 case} {\cf22 "Table C"} ->\par
00375                                     tableDecks.get(2).addCard(heldCard);\par
00376                                 {\cf19 case} {\cf22 "Table D"} ->\par
00377                                     tableDecks.get(3).addCard(heldCard);\par
00378                                 {\cf19 case} {\cf22 "Table E"} ->\par
00379                                     tableDecks.get(4).addCard(heldCard);\par
00380                                 {\cf19 case} {\cf22 "Table F"} ->\par
00381                                     tableDecks.get(5).addCard(heldCard);\par
00382                                 {\cf19 case} {\cf22 "Table G"} ->\par
00383                                     tableDecks.get(6).addCard(heldCard);\par
00384                             \}\par
00385                         \} {\cf19 else} \{\par
00386                             {\cf19 if} (sourceString.equals({\cf22 "Discard"})) \{ {\cf20 // If the source is the discard pile}\par
00387                                 score.scoreFromDiscard(); {\cf20 // Score the move from the discard pile}\par
00388                             \} {\cf19 else} \{\par
00389                                 score.scoreFromTable(); {\cf20 // Score the move from a table deck}\par
00390                             \}\par
00391                         \}\par
00392                     \}\par
00393                     {\cf19 case} {\cf22 "club"} -> \{\par
00394                         heldCard = clubBuild.playCard(heldCard);\par
00395                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00396                             System.out.println({\cf22 "Invalid move. Card not placed in Clubs."});\par
00397                             {\cf19 switch} (sourceString) \{\par
00398                                 {\cf19 case} {\cf22 "Discard"} ->\par
00399                                     discardPile.addCard(heldCard);\par
00400                                 {\cf19 case} {\cf22 "Table A"} ->\par
00401                                     tableDecks.get(0).addCard(heldCard);\par
00402                                 {\cf19 case} {\cf22 "Table B"} ->\par
00403                                     tableDecks.get(1).addCard(heldCard);\par
00404                                 {\cf19 case} {\cf22 "Table C"} ->\par
00405                                     tableDecks.get(2).addCard(heldCard);\par
00406                                 {\cf19 case} {\cf22 "Table D"} ->\par
00407                                     tableDecks.get(3).addCard(heldCard);\par
00408                                 {\cf19 case} {\cf22 "Table E"} ->\par
00409                                     tableDecks.get(4).addCard(heldCard);\par
00410                                 {\cf19 case} {\cf22 "Table F"} ->\par
00411                                     tableDecks.get(5).addCard(heldCard);\par
00412                                 {\cf19 case} {\cf22 "Table G"} ->\par
00413                                     tableDecks.get(6).addCard(heldCard);\par
00414                             \}\par
00415                         \} {\cf19 else} \{\par
00416                             {\cf19 if} (sourceString.equals({\cf22 "Discard"})) \{ {\cf20 // If the source is the discard pile}\par
00417                                 score.scoreFromDiscard(); {\cf20 // Score the move from the discard pile}\par
00418                             \} {\cf19 else} \{\par
00419                                 score.scoreFromTable(); {\cf20 // Score the move from a table deck}\par
00420                             \}\par
00421                         \}\par
00422                     \}\par
00423                     {\cf19 case} {\cf22 "a"} -> \{\par
00424                         heldCard = tableDecks.get(0).playCard(heldCard);\par
00425                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00426                             System.out.println({\cf22 "Invalid move. Card not placed in Table A."});\par
00427                             {\cf19 switch} (sourceString) \{\par
00428                                 {\cf19 case} {\cf22 "Discard"} ->\par
00429                                     discardPile.addCard(heldCard);\par
00430                                 {\cf19 case} {\cf22 "Table A"} ->\par
00431                                     tableDecks.get(0).addCard(heldCard);\par
00432                                 {\cf19 case} {\cf22 "Table B"} ->\par
00433                                     tableDecks.get(1).addCard(heldCard);\par
00434                                 {\cf19 case} {\cf22 "Table C"} ->\par
00435                                     tableDecks.get(2).addCard(heldCard);\par
00436                                 {\cf19 case} {\cf22 "Table D"} ->\par
00437                                     tableDecks.get(3).addCard(heldCard);\par
00438                                 {\cf19 case} {\cf22 "Table E"} ->\par
00439                                     tableDecks.get(4).addCard(heldCard);\par
00440                                 {\cf19 case} {\cf22 "Table F"} ->\par
00441                                     tableDecks.get(5).addCard(heldCard);\par
00442                                 {\cf19 case} {\cf22 "Table G"} ->\par
00443                                     tableDecks.get(6).addCard(heldCard);\par
00444                             \}\par
00445                         \} {\cf19 else} \{\par
00446                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00447                         \}\par
00448                     \}\par
00449                     {\cf19 case} {\cf22 "b"} -> \{\par
00450                         heldCard = tableDecks.get(1).playCard(heldCard);\par
00451                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00452                             System.out.println({\cf22 "Invalid move. Card not placed in Table B."});\par
00453                             {\cf19 switch} (sourceString) \{\par
00454                                 {\cf19 case} {\cf22 "Discard"} ->\par
00455                                     discardPile.addCard(heldCard);\par
00456                                 {\cf19 case} {\cf22 "Table A"} ->\par
00457                                     tableDecks.get(0).addCard(heldCard);\par
00458                                 {\cf19 case} {\cf22 "Table B"} ->\par
00459                                     tableDecks.get(1).addCard(heldCard);\par
00460                                 {\cf19 case} {\cf22 "Table C"} ->\par
00461                                     tableDecks.get(2).addCard(heldCard);\par
00462                                 {\cf19 case} {\cf22 "Table D"} ->\par
00463                                     tableDecks.get(3).addCard(heldCard);\par
00464                                 {\cf19 case} {\cf22 "Table E"} ->\par
00465                                     tableDecks.get(4).addCard(heldCard);\par
00466                                 {\cf19 case} {\cf22 "Table F"} ->\par
00467                                     tableDecks.get(5).addCard(heldCard);\par
00468                                 {\cf19 case} {\cf22 "Table G"} ->\par
00469                                     tableDecks.get(6).addCard(heldCard);\par
00470                             \}\par
00471                         \} {\cf19 else} \{\par
00472                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00473                         \}\par
00474                     \}\par
00475                     {\cf19 case} {\cf22 "c"} -> \{\par
00476                         heldCard = tableDecks.get(2).playCard(heldCard);\par
00477                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00478                             System.out.println({\cf22 "Invalid move. Card not placed in Table C."});\par
00479                             {\cf19 switch} (sourceString) \{\par
00480                                 {\cf19 case} {\cf22 "Discard"} ->\par
00481                                     discardPile.addCard(heldCard);\par
00482                                 {\cf19 case} {\cf22 "Table A"} ->\par
00483                                     tableDecks.get(0).addCard(heldCard);\par
00484                                 {\cf19 case} {\cf22 "Table B"} ->\par
00485                                     tableDecks.get(1).addCard(heldCard);\par
00486                                 {\cf19 case} {\cf22 "Table C"} ->\par
00487                                     tableDecks.get(2).addCard(heldCard);\par
00488                                 {\cf19 case} {\cf22 "Table D"} ->\par
00489                                     tableDecks.get(3).addCard(heldCard);\par
00490                                 {\cf19 case} {\cf22 "Table E"} ->\par
00491                                     tableDecks.get(4).addCard(heldCard);\par
00492                                 {\cf19 case} {\cf22 "Table F"} ->\par
00493                                     tableDecks.get(5).addCard(heldCard);\par
00494                                 {\cf19 case} {\cf22 "Table G"} ->\par
00495                                     tableDecks.get(6).addCard(heldCard);\par
00496                             \}\par
00497                         \} {\cf19 else} \{\par
00498                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00499                         \}\par
00500                     \}\par
00501                     {\cf19 case} {\cf22 "d"} -> \{\par
00502                         heldCard = tableDecks.get(3).playCard(heldCard);\par
00503                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00504                             System.out.println({\cf22 "Invalid move. Card not placed in Table D."});\par
00505                             {\cf19 switch} (sourceString) \{\par
00506                                 {\cf19 case} {\cf22 "Discard"} ->\par
00507                                     discardPile.addCard(heldCard);\par
00508                                 {\cf19 case} {\cf22 "Table A"} ->\par
00509                                     tableDecks.get(0).addCard(heldCard);\par
00510                                 {\cf19 case} {\cf22 "Table B"} ->\par
00511                                     tableDecks.get(1).addCard(heldCard);\par
00512                                 {\cf19 case} {\cf22 "Table C"} ->\par
00513                                     tableDecks.get(2).addCard(heldCard);\par
00514                                 {\cf19 case} {\cf22 "Table D"} ->\par
00515                                     tableDecks.get(3).addCard(heldCard);\par
00516                                 {\cf19 case} {\cf22 "Table E"} ->\par
00517                                     tableDecks.get(4).addCard(heldCard);\par
00518                                 {\cf19 case} {\cf22 "Table F"} ->\par
00519                                     tableDecks.get(5).addCard(heldCard);\par
00520                                 {\cf19 case} {\cf22 "Table G"} ->\par
00521                                     tableDecks.get(6).addCard(heldCard);\par
00522                             \}\par
00523                         \} {\cf19 else} \{\par
00524                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00525                         \}\par
00526                     \}\par
00527                     {\cf19 case} {\cf22 "e"} -> \{\par
00528                         heldCard = tableDecks.get(4).playCard(heldCard);\par
00529                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00530                             System.out.println({\cf22 "Invalid move. Card not placed in Table E."});\par
00531                             {\cf19 switch} (sourceString) \{\par
00532                                 {\cf19 case} {\cf22 "Discard"} ->\par
00533                                     discardPile.addCard(heldCard);\par
00534                                 {\cf19 case} {\cf22 "Table A"} ->\par
00535                                     tableDecks.get(0).addCard(heldCard);\par
00536                                 {\cf19 case} {\cf22 "Table B"} ->\par
00537                                     tableDecks.get(1).addCard(heldCard);\par
00538                                 {\cf19 case} {\cf22 "Table C"} ->\par
00539                                     tableDecks.get(2).addCard(heldCard);\par
00540                                 {\cf19 case} {\cf22 "Table D"} ->\par
00541                                     tableDecks.get(3).addCard(heldCard);\par
00542                                 {\cf19 case} {\cf22 "Table E"} ->\par
00543                                     tableDecks.get(4).addCard(heldCard);\par
00544                                 {\cf19 case} {\cf22 "Table F"} ->\par
00545                                     tableDecks.get(5).addCard(heldCard);\par
00546                                 {\cf19 case} {\cf22 "Table G"} ->\par
00547                                     tableDecks.get(6).addCard(heldCard);\par
00548                             \}\par
00549                         \} {\cf19 else} \{\par
00550                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00551                         \}\par
00552                     \}\par
00553                     {\cf19 case} {\cf22 "f"} -> \{\par
00554                         heldCard = tableDecks.get(5).playCard(heldCard);\par
00555                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00556                             System.out.println({\cf22 "Invalid move. Card not placed in Table F."});\par
00557                             {\cf19 switch} (sourceString) \{\par
00558                                 {\cf19 case} {\cf22 "Discard"} ->\par
00559                                     discardPile.addCard(heldCard);\par
00560                                 {\cf19 case} {\cf22 "Table A"} ->\par
00561                                     tableDecks.get(0).addCard(heldCard);\par
00562                                 {\cf19 case} {\cf22 "Table B"} ->\par
00563                                     tableDecks.get(1).addCard(heldCard);\par
00564                                 {\cf19 case} {\cf22 "Table C"} ->\par
00565                                     tableDecks.get(2).addCard(heldCard);\par
00566                                 {\cf19 case} {\cf22 "Table D"} ->\par
00567                                     tableDecks.get(3).addCard(heldCard);\par
00568                                 {\cf19 case} {\cf22 "Table E"} ->\par
00569                                     tableDecks.get(4).addCard(heldCard);\par
00570                                 {\cf19 case} {\cf22 "Table F"} ->\par
00571                                     tableDecks.get(5).addCard(heldCard);\par
00572                                 {\cf19 case} {\cf22 "Table G"} ->\par
00573                                     tableDecks.get(6).addCard(heldCard);\par
00574                             \}\par
00575                         \} {\cf19 else} \{\par
00576                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00577                         \}\par
00578                     \}\par
00579                     {\cf19 case} {\cf22 "g"} -> \{\par
00580                         heldCard = tableDecks.get(6).playCard(heldCard);\par
00581                         {\cf19 if} (heldCard != {\cf17 null}) \{\par
00582                             System.out.println({\cf22 "Invalid move. Card not placed in Table G."});\par
00583                             {\cf19 switch} (sourceString) \{\par
00584                                 {\cf19 case} {\cf22 "Discard"} ->\par
00585                                     discardPile.addCard(heldCard);\par
00586                                 {\cf19 case} {\cf22 "Table A"} ->\par
00587                                     tableDecks.get(0).addCard(heldCard);\par
00588                                 {\cf19 case} {\cf22 "Table B"} ->\par
00589                                     tableDecks.get(1).addCard(heldCard);\par
00590                                 {\cf19 case} {\cf22 "Table C"} ->\par
00591                                     tableDecks.get(2).addCard(heldCard);\par
00592                                 {\cf19 case} {\cf22 "Table D"} ->\par
00593                                     tableDecks.get(3).addCard(heldCard);\par
00594                                 {\cf19 case} {\cf22 "Table E"} ->\par
00595                                     tableDecks.get(4).addCard(heldCard);\par
00596                                 {\cf19 case} {\cf22 "Table F"} ->\par
00597                                     tableDecks.get(5).addCard(heldCard);\par
00598                                 {\cf19 case} {\cf22 "Table G"} ->\par
00599                                     tableDecks.get(6).addCard(heldCard);\par
00600                             \}\par
00601                         \} {\cf19 else} \{\par
00602                             score.toTableScore(); {\cf20 // Score the move to a table deck}\par
00603                         \}\par
00604                     \}\par
00605                     {\cf19 default} -> \{ {\cf20 // If the user input is not valid, we print an error message and return the card to the source as before}\par
00606                         {\cf19 switch} (sourceString) \{\par
00607                             {\cf19 case} {\cf22 "Discard"} ->\par
00608                                 discardPile.addCard(heldCard);\par
00609                             {\cf19 case} {\cf22 "Table A"} ->\par
00610                                 tableDecks.get(0).addCard(heldCard);\par
00611                             {\cf19 case} {\cf22 "Table B"} ->\par
00612                                 tableDecks.get(1).addCard(heldCard);\par
00613                             {\cf19 case} {\cf22 "Table C"} ->\par
00614                                 tableDecks.get(2).addCard(heldCard);\par
00615                             {\cf19 case} {\cf22 "Table D"} ->\par
00616                                 tableDecks.get(3).addCard(heldCard);\par
00617                             {\cf19 case} {\cf22 "Table E"} ->\par
00618                                 tableDecks.get(4).addCard(heldCard);\par
00619                             {\cf19 case} {\cf22 "Table F"} ->\par
00620                                 tableDecks.get(5).addCard(heldCard);\par
00621                             {\cf19 case} {\cf22 "Table G"} ->\par
00622                                 tableDecks.get(6).addCard(heldCard);\par
00623                         \}\par
00624                         System.out.println({\cf22 "Invalid input"});\par
00625                     \}\par
00626 \par
00627                 \}\par
00628             \} {\cf19 else} {\cf19 if} (!bufferDeck.deck.isEmpty() & heldCard == {\cf17 null}) \{ {\cf20 // If the buffer deck is not empty and the held card is null, we are moving a stack of cards}\par
00629                 System.out.println({\cf22 "Held stack: "} + bufferDeck.deck.getFirst().getRank() + bufferDeck.deck.getFirst().getSuit() + {\cf22 " to "} + bufferDeck.deck.getLast().getRank() + bufferDeck.deck.getLast().getSuit()); {\cf20 // Print the stack of cards}\par
00630                 score.setMultipleBuffer(bufferDeck.deck.size()); {\cf20 // Set the score multiplier to the number of cards in the stack}\par
00631                 {\cf19 switch} (moveInput[1]) \{ {\cf20 // Switch statement to handle the user inputs second term, the destination of the card we are moving as before}\par
00632                     {\cf19 case} {\cf22 "a"} -> \{ {\cf20 // If the user input is 'a', move the stack of cards to table deck A, we need not need check if the cards are being moved to a build deck as stacks of cards cannot be moved to build decks}\par
00633                         bufferDeck = tableDecks.get(0).placeStack(bufferDeck); {\cf20 // Place the stack of cards in table deck A}\par
00634                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{ {\cf20 // If the stack of cards is not placed in table deck A, ie the move is invalid}\par
00635                             System.out.println({\cf22 "Invalid move. Card not placed in Table A."}); {\cf20 // Print an error message}\par
00636                             score.clearMultipleBuffer(); {\cf20 // Clear the score multiplier as the move was invalid}\par
00637                             {\cf19 switch} (sourceString) \{ {\cf20 // Switch statement to handle the source of the card we are moving, same as before}\par
00638                                 {\cf19 case} {\cf22 "Table A"} -> \{ {\cf20 // If the source is table deck A}\par
00639                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst()); {\cf20 // Add the first card of the stack back to table deck A, this is done to force the place stack to work correctly as otherwise it would check the face down card below where the stack was taken from}\par
00640                                     bufferDeck.deck.removeFirst(); {\cf20 // Remove the first card from the stack}\par
00641                                     tableDecks.get(0).placeStack(bufferDeck); {\cf20 // Place the stack of cards back in table deck A, which will now succeed given that the stack was valid before}\par
00642                                 \}\par
00643                                 {\cf20 // Again, this code is repeated for each of the table decks, A-G}\par
00644                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00645                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00646                                     bufferDeck.deck.removeFirst();\par
00647                                     tableDecks.get(1).placeStack(bufferDeck);\par
00648                                 \}\par
00649                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00650                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00651                                     bufferDeck.deck.removeFirst();\par
00652                                     tableDecks.get(2).placeStack(bufferDeck);\par
00653                                 \}\par
00654                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00655                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00656                                     bufferDeck.deck.removeFirst();\par
00657                                     tableDecks.get(3).placeStack(bufferDeck);\par
00658                                 \}\par
00659                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00660                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00661                                     bufferDeck.deck.removeFirst();\par
00662                                     tableDecks.get(4).placeStack(bufferDeck);\par
00663                                 \}\par
00664                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00665                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00666                                     bufferDeck.deck.removeFirst();\par
00667                                     tableDecks.get(5).placeStack(bufferDeck);\par
00668                                 \}\par
00669                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00670                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00671                                     bufferDeck.deck.removeFirst();\par
00672                                     tableDecks.get(6).placeStack(bufferDeck);\par
00673                                 \}\par
00674                             \}\par
00675                         \} {\cf19 else} \{ {\cf20 // If the stack of cards is placed in table deck A}\par
00676                             score.scoreFromTableMultiple(); {\cf20 // Score the move from a table deck}\par
00677                         \}\par
00678                     \}\par
00679                     {\cf20 // and again, this code is repeated for each of the table decks, A-G}\par
00680                     {\cf19 case} {\cf22 "b"} -> \{\par
00681                         bufferDeck = tableDecks.get(1).placeStack(bufferDeck);\par
00682                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00683                             System.out.println({\cf22 "Invalid move. Card not placed in Table B."});\par
00684                             score.clearMultipleBuffer();\par
00685                             {\cf19 switch} (sourceString) \{\par
00686                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00687                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00688                                     bufferDeck.deck.removeFirst();\par
00689                                     tableDecks.get(0).placeStack(bufferDeck);\par
00690                                 \}\par
00691                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00692                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00693                                     bufferDeck.deck.removeFirst();\par
00694                                     tableDecks.get(1).placeStack(bufferDeck);\par
00695                                 \}\par
00696                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00697                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00698                                     bufferDeck.deck.removeFirst();\par
00699                                     tableDecks.get(2).placeStack(bufferDeck);\par
00700                                 \}\par
00701                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00702                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00703                                     bufferDeck.deck.removeFirst();\par
00704                                     tableDecks.get(3).placeStack(bufferDeck);\par
00705                                 \}\par
00706                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00707                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00708                                     bufferDeck.deck.removeFirst();\par
00709                                     tableDecks.get(4).placeStack(bufferDeck);\par
00710                                 \}\par
00711                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00712                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00713                                     bufferDeck.deck.removeFirst();\par
00714                                     tableDecks.get(5).placeStack(bufferDeck);\par
00715                                 \}\par
00716                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00717                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00718                                     bufferDeck.deck.removeFirst();\par
00719                                     tableDecks.get(6).placeStack(bufferDeck);\par
00720                                 \}\par
00721                             \}\par
00722                         \} {\cf19 else} \{\par
00723                             score.scoreFromTableMultiple();\par
00724                         \}\par
00725 \par
00726                     \}\par
00727                     {\cf19 case} {\cf22 "c"} -> \{\par
00728                         bufferDeck = tableDecks.get(2).placeStack(bufferDeck);\par
00729                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00730                             System.out.println({\cf22 "Invalid move. Card not placed in Table C."});\par
00731                             score.clearMultipleBuffer();\par
00732                             {\cf19 switch} (sourceString) \{\par
00733                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00734                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00735                                     bufferDeck.deck.removeFirst();\par
00736                                     tableDecks.get(0).placeStack(bufferDeck);\par
00737                                 \}\par
00738                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00739                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00740                                     bufferDeck.deck.removeFirst();\par
00741                                     tableDecks.get(1).placeStack(bufferDeck);\par
00742                                 \}\par
00743                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00744                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00745                                     bufferDeck.deck.removeFirst();\par
00746                                     tableDecks.get(2).placeStack(bufferDeck);\par
00747                                 \}\par
00748                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00749                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00750                                     bufferDeck.deck.removeFirst();\par
00751                                     tableDecks.get(3).placeStack(bufferDeck);\par
00752                                 \}\par
00753                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00754                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00755                                     bufferDeck.deck.removeFirst();\par
00756                                     tableDecks.get(4).placeStack(bufferDeck);\par
00757                                 \}\par
00758                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00759                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00760                                     bufferDeck.deck.removeFirst();\par
00761                                     tableDecks.get(5).placeStack(bufferDeck);\par
00762                                 \}\par
00763                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00764                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00765                                     bufferDeck.deck.removeFirst();\par
00766                                     tableDecks.get(6).placeStack(bufferDeck);\par
00767                                 \}\par
00768                             \}\par
00769                         \} {\cf19 else} \{\par
00770                             score.scoreFromTableMultiple();\par
00771                         \}\par
00772 \par
00773                     \}\par
00774                     {\cf19 case} {\cf22 "d"} -> \{\par
00775                         bufferDeck = tableDecks.get(3).placeStack(bufferDeck);\par
00776                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00777                             System.out.println({\cf22 "Invalid move. Card not placed in Table D."});\par
00778                             score.clearMultipleBuffer();\par
00779                             {\cf19 switch} (sourceString) \{\par
00780                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00781                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00782                                     bufferDeck.deck.removeFirst();\par
00783                                     tableDecks.get(0).placeStack(bufferDeck);\par
00784                                 \}\par
00785                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00786                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00787                                     bufferDeck.deck.removeFirst();\par
00788                                     tableDecks.get(1).placeStack(bufferDeck);\par
00789                                 \}\par
00790                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00791                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00792                                     bufferDeck.deck.removeFirst();\par
00793                                     tableDecks.get(2).placeStack(bufferDeck);\par
00794                                 \}\par
00795                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00796                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00797                                     bufferDeck.deck.removeFirst();\par
00798                                     tableDecks.get(3).placeStack(bufferDeck);\par
00799                                 \}\par
00800                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00801                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00802                                     bufferDeck.deck.removeFirst();\par
00803                                     tableDecks.get(4).placeStack(bufferDeck);\par
00804                                 \}\par
00805                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00806                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00807                                     bufferDeck.deck.removeFirst();\par
00808                                     tableDecks.get(5).placeStack(bufferDeck);\par
00809                                 \}\par
00810                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00811                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00812                                     bufferDeck.deck.removeFirst();\par
00813                                     tableDecks.get(6).placeStack(bufferDeck);\par
00814                                 \}\par
00815                             \}\par
00816                         \} {\cf19 else} \{\par
00817                             score.scoreFromTableMultiple();\par
00818                         \}\par
00819 \par
00820                     \}\par
00821                     {\cf19 case} {\cf22 "e"} -> \{\par
00822                         bufferDeck = tableDecks.get(4).placeStack(bufferDeck);\par
00823                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00824                             System.out.println({\cf22 "Invalid move. Card not placed in Table E."});\par
00825                             score.clearMultipleBuffer();\par
00826                             {\cf19 switch} (sourceString) \{\par
00827                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00828                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00829                                     bufferDeck.deck.removeFirst();\par
00830                                     tableDecks.get(0).placeStack(bufferDeck);\par
00831                                 \}\par
00832                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00833                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00834                                     bufferDeck.deck.removeFirst();\par
00835                                     tableDecks.get(1).placeStack(bufferDeck);\par
00836                                 \}\par
00837                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00838                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00839                                     bufferDeck.deck.removeFirst();\par
00840                                     tableDecks.get(2).placeStack(bufferDeck);\par
00841                                 \}\par
00842                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00843                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00844                                     bufferDeck.deck.removeFirst();\par
00845                                     tableDecks.get(3).placeStack(bufferDeck);\par
00846                                 \}\par
00847                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00848                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00849                                     bufferDeck.deck.removeFirst();\par
00850                                     tableDecks.get(4).placeStack(bufferDeck);\par
00851                                 \}\par
00852                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00853                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00854                                     bufferDeck.deck.removeFirst();\par
00855                                     tableDecks.get(5).placeStack(bufferDeck);\par
00856                                 \}\par
00857                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00858                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00859                                     bufferDeck.deck.removeFirst();\par
00860                                     tableDecks.get(6).placeStack(bufferDeck);\par
00861                                 \}\par
00862                             \}\par
00863                         \} {\cf19 else} \{\par
00864                             score.scoreFromTableMultiple();\par
00865                         \}\par
00866 \par
00867                     \}\par
00868                     {\cf19 case} {\cf22 "f"} -> \{\par
00869                         bufferDeck = tableDecks.get(5).placeStack(bufferDeck);\par
00870                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00871                             System.out.println({\cf22 "Invalid move. Card not placed in Table F."});\par
00872                             score.clearMultipleBuffer();\par
00873                             {\cf19 switch} (sourceString) \{\par
00874                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00875                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00876                                     bufferDeck.deck.removeFirst();\par
00877                                     tableDecks.get(0).placeStack(bufferDeck);\par
00878                                 \}\par
00879                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00880                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00881                                     bufferDeck.deck.removeFirst();\par
00882                                     tableDecks.get(1).placeStack(bufferDeck);\par
00883                                 \}\par
00884                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00885                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00886                                     bufferDeck.deck.removeFirst();\par
00887                                     tableDecks.get(2).placeStack(bufferDeck);\par
00888                                 \}\par
00889                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00890                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00891                                     bufferDeck.deck.removeFirst();\par
00892                                     tableDecks.get(3).placeStack(bufferDeck);\par
00893                                 \}\par
00894                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00895                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00896                                     bufferDeck.deck.removeFirst();\par
00897                                     tableDecks.get(4).placeStack(bufferDeck);\par
00898                                 \}\par
00899                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00900                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00901                                     bufferDeck.deck.removeFirst();\par
00902                                     tableDecks.get(5).placeStack(bufferDeck);\par
00903                                 \}\par
00904                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00905                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00906                                     bufferDeck.deck.removeFirst();\par
00907                                     tableDecks.get(6).placeStack(bufferDeck);\par
00908                                 \}\par
00909                             \}\par
00910                         \} {\cf19 else} \{\par
00911                             score.scoreFromTableMultiple();\par
00912                         \}\par
00913 \par
00914                     \}\par
00915                     {\cf19 case} {\cf22 "g"} -> \{\par
00916                         bufferDeck = tableDecks.get(6).placeStack(bufferDeck);\par
00917                         {\cf19 if} (!bufferDeck.deck.isEmpty()) \{\par
00918                             System.out.println({\cf22 "Invalid move. Card not placed in Table G."});\par
00919                             score.clearMultipleBuffer();\par
00920                             {\cf19 switch} (sourceString) \{\par
00921                                 {\cf19 case} {\cf22 "Table A"} -> \{\par
00922                                     tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00923                                     bufferDeck.deck.removeFirst();\par
00924                                     tableDecks.get(0).placeStack(bufferDeck);\par
00925                                 \}\par
00926                                 {\cf19 case} {\cf22 "Table B"} -> \{\par
00927                                     tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00928                                     bufferDeck.deck.removeFirst();\par
00929                                     tableDecks.get(1).placeStack(bufferDeck);\par
00930                                 \}\par
00931                                 {\cf19 case} {\cf22 "Table C"} -> \{\par
00932                                     tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00933                                     bufferDeck.deck.removeFirst();\par
00934                                     tableDecks.get(2).placeStack(bufferDeck);\par
00935                                 \}\par
00936                                 {\cf19 case} {\cf22 "Table D"} -> \{\par
00937                                     tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00938                                     bufferDeck.deck.removeFirst();\par
00939                                     tableDecks.get(3).placeStack(bufferDeck);\par
00940                                 \}\par
00941                                 {\cf19 case} {\cf22 "Table E"} -> \{\par
00942                                     tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00943                                     bufferDeck.deck.removeFirst();\par
00944                                     tableDecks.get(4).placeStack(bufferDeck);\par
00945                                 \}\par
00946                                 {\cf19 case} {\cf22 "Table F"} -> \{\par
00947                                     tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00948                                     bufferDeck.deck.removeFirst();\par
00949                                     tableDecks.get(5).placeStack(bufferDeck);\par
00950                                 \}\par
00951                                 {\cf19 case} {\cf22 "Table G"} -> \{\par
00952                                     tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00953                                     bufferDeck.deck.removeFirst();\par
00954                                     tableDecks.get(6).placeStack(bufferDeck);\par
00955                                 \}\par
00956                             \}\par
00957                         \} {\cf19 else} \{\par
00958                             score.scoreFromTableMultiple();\par
00959                         \}\par
00960 \par
00961                     \}\par
00962                     {\cf19 default} -> \{ {\cf20 // If the user input is not valid, we print an error message and return the stack of cards to the source as before}\par
00963                         score.clearMultipleBuffer(); {\cf20 // Clear the score multiplier as the move was invalid}\par
00964                         {\cf19 switch} (sourceString) \{\par
00965                             {\cf19 case} {\cf22 "Table A"} -> \{\par
00966                                 tableDecks.get(0).addCard(bufferDeck.deck.getFirst());\par
00967                                 bufferDeck.deck.removeFirst();\par
00968                                 tableDecks.get(0).placeStack(bufferDeck);\par
00969                             \}\par
00970                             {\cf19 case} {\cf22 "Table B"} -> \{\par
00971                                 tableDecks.get(1).addCard(bufferDeck.deck.getFirst());\par
00972                                 bufferDeck.deck.removeFirst();\par
00973                                 tableDecks.get(1).placeStack(bufferDeck);\par
00974                             \}\par
00975                             {\cf19 case} {\cf22 "Table C"} -> \{\par
00976                                 tableDecks.get(2).addCard(bufferDeck.deck.getFirst());\par
00977                                 bufferDeck.deck.removeFirst();\par
00978                                 tableDecks.get(2).placeStack(bufferDeck);\par
00979                             \}\par
00980                             {\cf19 case} {\cf22 "Table D"} -> \{\par
00981                                 tableDecks.get(3).addCard(bufferDeck.deck.getFirst());\par
00982                                 bufferDeck.deck.removeFirst();\par
00983                                 tableDecks.get(3).placeStack(bufferDeck);\par
00984                             \}\par
00985                             {\cf19 case} {\cf22 "Table E"} -> \{\par
00986                                 tableDecks.get(4).addCard(bufferDeck.deck.getFirst());\par
00987                                 bufferDeck.deck.removeFirst();\par
00988                                 tableDecks.get(4).placeStack(bufferDeck);\par
00989                             \}\par
00990                             {\cf19 case} {\cf22 "Table F"} -> \{\par
00991                                 tableDecks.get(5).addCard(bufferDeck.deck.getFirst());\par
00992                                 bufferDeck.deck.removeFirst();\par
00993                                 tableDecks.get(5).placeStack(bufferDeck);\par
00994                             \}\par
00995                             {\cf19 case} {\cf22 "Table G"} -> \{\par
00996                                 tableDecks.get(6).addCard(bufferDeck.deck.getFirst());\par
00997                                 bufferDeck.deck.removeFirst();\par
00998                                 tableDecks.get(6).placeStack(bufferDeck);\par
00999                             \}\par
01000                         \}\par
01001                         System.out.println({\cf22 "Invalid input"});\par
01002                     \}\par
01003                 \}\par
01004             \} {\cf19 else} \{ {\cf20 // if the held card is null, we have just drawn 3 cards to the discard pile and thus are not holding anything}\par
01005                 System.out.println({\cf22 "Held card: None"}); {\cf20 // Print that we are not holding anything}\par
01006             \}\par
01007         \}\par
01008         {\cf19 if} (spadeBuild.getDeckSize() + clubBuild.getDeckSize() + heartBuild.getDeckSize() + diamondBuild.getDeckSize() == 52) \{ {\cf20 // If all the build decks are full, the game is won}\par
01009             System.out.println({\cf22 "You win!"}); {\cf20 // Print a win message}\par
01010             System.out.println({\cf22 "Score: "} + score.getScore()); {\cf20 // Print the final score}\par
01011             System.out.println({\cf22 "Time Spent: "} + score.elapedTime()); {\cf20 // Print the time spent}\par
01012         \}\par
01013     \}\par
01014 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/ScoreSystem.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/ScoreSystem.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/ScoreSystem.java}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ScoreSystem}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ScoreSystem.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/ScoreSystem.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/ScoreSystem.java}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00002 {\cf17 public} {\cf17 class }ScoreSystem \{\par
00003     {\cf17 private} {\cf18 int} score; {\cf20 // Integer to store the score}\par
00004     {\cf17 private} {\cf17 final} {\cf18 long} startTime; {\cf20 // long final to store the start time of the game}\par
00005     {\cf17 private} {\cf18 int} multipleBuffer;\par
00006 \par
00010     {\cf17 public} ScoreSystem() \{\par
00011         this.score = 0; {\cf20 // Set the score to 0}\par
00012         this.startTime = System.currentTimeMillis(); {\cf20 // Set the start time to the current time}\par
00013         this.multipleBuffer = 0;\par
00014     \}\par
00015 \par
00019     {\cf17 public} {\cf18 int} getScore() \{\par
00020         {\cf19 return} score;\par
00021     \}\par
00022 \par
00027     {\cf17 public} {\cf18 int} elapedTime() \{\par
00028         {\cf19 return} ({\cf18 int})((System.currentTimeMillis() - startTime) / 1000);\par
00029     \}\par
00030 \par
00034     {\cf17 public} {\cf18 void} scoreFromDiscard() \{\par
00035         score += 10;\par
00036     \}\par
00037 \par
00041     {\cf17 public} {\cf18 void} scoreFromTable() \{\par
00042         score += 20;\par
00043     \}\par
00044 \par
00048     {\cf17 public} {\cf18 void} toTableScore() \{\par
00049         score += 5;\par
00050     \}\par
00051 \par
00055     {\cf17 public} {\cf18 void} setMultipleBuffer({\cf18 int} multiple) \{\par
00056         multipleBuffer = multiple;\par
00057     \}\par
00058 \par
00062     {\cf17 public} {\cf18 void} scoreFromTableMultiple() \{\par
00063         score += 5 * multipleBuffer;\par
00064         multipleBuffer = 0;\par
00065     \}\par
00066 \par
00070     {\cf17 public} {\cf18 void} clearMultipleBuffer() \{\par
00071         multipleBuffer = 0;\par
00072     \}\par
00073 \par
00074 \par
00075 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/TableDeck.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/TableDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/TableDeck.java}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b TableDeck}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TableDeck.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/TableDeck.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/TableDeck.java}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* Table Deck class extends Deck and represents one of the 7 piles of cards on the playtable */}\par
00002 {\cf17 public} {\cf17 class }TableDeck {\cf17 extends} Deck \{\par
00003 \par
00004     {\cf18 boolean} hasStack = {\cf17 false}; {\cf20 // Boolean to check if the deck has a stack of cards}\par
00005 \par
00006 \par
00007     {\cf17 public} TableDeck() \{ {\cf20 // Constructor for TableDeck class}\par
00008         super();\par
00009     \}\par
00010 \par
00016     {\cf17 public} {\cf18 void} initalFill({\cf18 int} nCards, Deck deckIn) \{\par
00017         {\cf19 for} ({\cf18 int} i = 0; i < nCards; i++) \{ {\cf20 // Loop to fill the deck with the specified number of cards}\par
00018             Card inCard = deckIn.takeCard(); {\cf20 // Take a card from the deck}\par
00019             {\cf19 if} (inCard != {\cf17 null}) \{ {\cf20 // If the card is not null}\par
00020                 this.deck.add(inCard); {\cf20 // Add the card to the deck}\par
00021                 this.deck.getLast().under(); {\cf20 // Set the card to be under}\par
00022                 this.deck.getLast().hide(); {\cf20 // Hide the card}\par
00023             \}\par
00024         \}\par
00025         this.deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00026         this.deck.getLast().show(); {\cf20 // Show the last card}\par
00027     \}\par
00028 \par
00032     {\cf17 public} {\cf18 void} revealCardCheck() \{\par
00033         {\cf18 int} count = 0; {\cf20 // Integer to count the number of cards shown}\par
00034         {\cf19 if} (!this.deck.isEmpty()) \{ {\cf20 // If the deck is not empty}\par
00035             {\cf19 for} (Card card : this.deck) \{ {\cf20 // Loop through the deck}\par
00036                 card.under(); {\cf20 // Set the card to be under}\par
00037                 {\cf19 if} (card.isShown()) \{ {\cf20 // If the card is shown}\par
00038                     count++; {\cf20 // Increment the count}\par
00039                 \}\par
00040             \}\par
00041             this.deck.getLast().over(); {\cf20 // Set the last card to be over}\par
00042             {\cf19 if} (!this.deck.getLast().isShown()) \{ {\cf20 // If the last card is not shown}\par
00043                 this.deck.getLast().show(); {\cf20 // Show the last card, as this should always be the case}\par
00044             \}\par
00045             this.hasStack = count > 1; {\cf20 // Set the hasStack boolean to true if the count is greater than 1}\par
00046         \}\par
00047     \}\par
00048 \par
00054     {\cf17 public} Deck grabStack({\cf18 int} indx) \{\par
00055         Deck stack = {\cf17 new} Deck(); {\cf20 // Create a new deck object to store the stack}\par
00056         {\cf18 int} deckSize = this.deck.size(); {\cf20 // Get the size of the deck}\par
00057         {\cf19 for} ({\cf18 int} i = indx; i < deckSize; i++) \{ {\cf20 // Loop through the deck from the index to the end}\par
00058             stack.deck.add(this.deck.get(i)); {\cf20 // Add the card to the stack}\par
00059         \}\par
00060         {\cf19 for} ({\cf18 int} i = deckSize - 1; i >= indx; i--) \{ {\cf20 // Loop through the deck from the end to the index}\par
00061             this.deck.remove(i); {\cf20 // Remove the card from the deck}\par
00062         \}\par
00063         {\cf19 return} stack; {\cf20 // Return the stack}\par
00064     \}\par
00065 \par
00071     {\cf17 public} Deck placeStack(Deck stack) \{\par
00072         {\cf19 if} (stack.deck.isEmpty()) \{ {\cf20 // If the stack is empty}\par
00073             {\cf19 return} stack; {\cf20 // Return the stack (faliure misrepresneted as success but no effect)}\par
00074         \}\par
00075         {\cf19 if} (this.deck.isEmpty() & stack.deck.getFirst().getRank().equals({\cf22 " K"})) \{ {\cf20 // If the deck is empty and the stack starts with a King}\par
00076             {\cf19 for} (Card card : stack.deck) \{ {\cf20 // Loop through the stack}\par
00077                 this.playCard(card); {\cf20 // Play the card (Placing the cards while checking order and isShown status)}\par
00078             \}\par
00079             stack.deck.clear(); {\cf20 // Clear the stack (success)}\par
00080             {\cf19 return} stack; {\cf20 // Return the stack}\par
00081         \} {\cf19 else} {\cf19 if} (this.playCard(stack.deck.getFirst()) == {\cf17 null}) \{ {\cf20 // If the card can be played}\par
00082             {\cf19 for} (Card card : stack.deck) \{ {\cf20 // Loop through the stack}\par
00083                 this.playCard(card); {\cf20 // Play the card (Placing the cards while checking order and isShown status)}\par
00084             \}\par
00085             stack.deck.clear(); {\cf20 // Clear the stack (success)}\par
00086             {\cf19 return} stack; {\cf20 // Return the stack}\par
00087         \} {\cf19 else} \{\par
00088             {\cf19 return} stack; {\cf20 // Return the stack (failure) }\par
00089         \}\par
00090     \}\par
00091 \par
00097     {\cf17 public} Card playCard(Card cardIn) \{\par
00098         {\cf19 if} (this.deck.isEmpty() && cardIn.getRank().equals({\cf22 " K"})) \{ {\cf20 // If the deck is empty and the card is a King}\par
00099             this.deck.add(cardIn); {\cf20 // Add the card to the deck}\par
00100             this.deck.getLast().over(); {\cf20 // Set the card to be over}\par
00101             this.deck.getLast().show(); {\cf20 // Show the card}\par
00102             {\cf19 return} {\cf17 null}; {\cf20 // Return null (success)}\par
00103         \} {\cf19 else} {\cf19 if} (!this.deck.isEmpty() && ({\cf17 this}.deck.getLast().getNumValue() - 1 == cardIn.getNumValue() && ((({\cf17 this}.deck.getLast().getSuit().equals({\cf22 "S"}) || {\cf17 this}.deck.getLast().getSuit().equals({\cf22 "C"})) && (cardIn.getSuit().equals({\cf22 "H"}) || cardIn.getSuit().equals({\cf22 "D"}))) || (({\cf17 this}.deck.getLast().getSuit().equals({\cf22 "H"}) || {\cf17 this}.deck.getLast().getSuit().equals({\cf22 "D"})) && (cardIn.getSuit().equals({\cf22 "S"}) || cardIn.getSuit().equals({\cf22 "C"})))))) \{ {\cf20 // If the card follows the correct order and the suits are alternating}\par
00104             this.deck.getLast().under(); {\cf20 // Set the last card to be under}\par
00105             this.deck.add(cardIn); {\cf20 // Add the card to the deck}\par
00106             this.deck.getLast().over();  {\cf20 // Set the card to be over}\par
00107             this.deck.getLast().show(); {\cf20 // Show the card}\par
00108             {\cf19 return} {\cf17 null}; {\cf20 // Return null (success)}\par
00109         \} {\cf19 else} \{  {\cf20 // If the card does not follow the correct order}\par
00110             {\cf19 return} cardIn; {\cf20 // Return the card (failure)}\par
00111         \}\par
00112     \}\par
00113 \par
00114 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/UserInputScanner.java File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/UserInputScanner.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/UserInputScanner.java}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 import java.util.Scanner;}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b UserInputScanner}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UserInputScanner.java\par \pard\plain 
{\tc\tcl2 \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/UserInputScanner.java}
{\xe \v C:/Users/SByers/OneDrive - Analog Devices, Inc/Desktop/java/UserInputScanner.java}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Go to the documentation of this file.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00002 {\cf17 import} java.util.Scanner;\par
00003 \par
00004 {\cf20 /* User Input Scanner class handles all user inputs into the program */}\par
00005 {\cf17 public} {\cf17 class }UserInputScanner \{\par
00006 \par
00014     {\cf17 public} String[] makeMove(Scanner scanner) \{\par
00015         System.out.println({\cf22 "What is your move (source destination nCards)? or q to quit, and De to draw 3 cards."});\par
00016         System.out.println({\cf22 "Take cards from De, Di, A, B, C, D, E, F, G"});\par
00017         System.out.println({\cf22 "Place card in A, B, C, D, E, F, G or in Heart, Diam, Spade or Club?"});\par
00018         {\cf19 if} (scanner.hasNextLine()) \{\par
00019             String userInput = scanner.nextLine();\par
00020             {\cf19 while} (userInput.isEmpty()) \{ {\cf20 // If the user input is empty, ask for input again}\par
00021                 userInput = scanner.nextLine();\par
00022             \}\par
00023             userInput = userInput.toLowerCase(); {\cf20 // Convert the user input to lowercase }\par
00024             String move[] = {\cf17 new} String[3]; {\cf20 // Create a string array to store the move}\par
00025 \par
00026             String[] moveBuff = userInput.split({\cf22 " "}); {\cf20 // Split the user input into an array of strings}\par
00027             {\cf19 if} (moveBuff.length > 3) \{ {\cf20 // If the user input has more than 3 arguments, print an error message}\par
00028                 System.out.println({\cf22 "Invalid number of arguments, all arguments after the third will be ignored."});\par
00029 \par
00030             \}\par
00031             {\cf19 for} ({\cf18 int} i = 0; i < 3 & i < moveBuff.length; i++) \{ {\cf20 // Copy the first 3 arguments into the move array}\par
00032                 move[i] = moveBuff[i];\par
00033             \}\par
00034 \par
00035             {\cf19 switch} (moveBuff.length) \{ {\cf20 // Check the number of arguments in the user input}\par
00036                 {\cf19 case} 1 -> \{\par
00037                     {\cf20 // If there is only one argument}\par
00038                     {\cf19 if} (move[0].equals({\cf22 "q"})) \{ {\cf20 // If the user input is 'q', return the move array}\par
00039                         {\cf19 return} move;\par
00040                     \}\par
00041                     {\cf19 if} (move[0].equals({\cf22 "de"})) \{ {\cf20 // if the user input is 'de', no other arguments are needed, return the move array}\par
00042                         {\cf19 return} move;\par
00043                     \}\par
00044                     System.out.println({\cf22 "Invalid number of arguments."}); {\cf20 // If the user input is not 'q' or 'de', print an error message}\par
00045                     {\cf19 return} {\cf17 null}; {\cf20 // Return null}\par
00046                 \}\par
00047                 {\cf19 case} 2 -> \{\par
00048                     {\cf20 // If there are two arguments}\par
00049                     move[2] = {\cf22 "Choose"}; {\cf20 // Set the third argument to "Choose", this will be used to prompt the user to choose the number of cards to move}\par
00050                     {\cf19 return} move; {\cf20 // Return the move array}\par
00051                 \}\par
00052                 {\cf19 case} 3 -> \{\par
00053                     {\cf20 // If there are three arguments}\par
00054                     {\cf19 return} move; {\cf20 // Return the move array}\par
00055                 \}\par
00056                 {\cf19 default} -> \{\par
00057                     {\cf20 // If there are more than three arguments}\par
00058                     System.out.println({\cf22 "Invalid number of arguments."}); {\cf20 // Print an error message}\par
00059                     {\cf19 return} {\cf17 null}; {\cf20 // Return null}\par
00060                 \}\par
00061             \}\par
00062             {\cf20 // Check the number of arguments in the user input}\par
00063             \par
00064         \} {\cf19 else} \{ {\cf20 // If there is no user input}\par
00065             System.out.println({\cf22 "No input available."}); {\cf20 // Print an error message}\par
00066             {\cf19 return} {\cf17 null}; {\cf20 // Return null}\par
00067         \}\par
00068     \}\par
00069 \par
00078     {\cf17 public} {\cf18 int} pickIndex(Scanner scanner, Deck deck) \{\par
00079         System.out.println({\cf22 "Which card do you want to pick? Enter the index:"});\par
00080         {\cf19 for} (Card card : deck.deck) \{ {\cf20 // Loop through the deck}\par
00081             {\cf19 if} (card.isShown()) \{ {\cf20 // If the card is shown (face up)}\par
00082                 System.out.println(card.getRank() + {\cf22 " of "} + card.getSuit() + {\cf22 " at index "} + deck.deck.indexOf(card)); {\cf20 // Print the card's rank, suit and index}\par
00083             \}\par
00084         \}\par
00085         {\cf19 if} (scanner.hasNextLine()) \{ {\cf20 // If there is user input}\par
00086             {\cf18 int} userInput = scanner.nextInt(); {\cf20 // Get the user input as an integer}\par
00087             {\cf19 if} (!(userInput < deck.deck.size())) \{ {\cf20 // If the user input is greater than the size of the deck}\par
00088                 System.out.println({\cf22 "Invalid Index."}); {\cf20 // Print an error message}\par
00089                 {\cf19 return} -1;\par
00090             \}\par
00091             {\cf19 if} (!deck.deck.get(userInput).isShown()) \{ {\cf20 // If the card at the user input index is not shown}\par
00092                 System.out.println({\cf22 "Invalid Index."}); {\cf20 // Print an error message}\par
00093                 {\cf19 return} -1;\par
00094             \}\par
00095             {\cf20 // otherwise, print the card's rank and suit}\par
00096             System.out.println({\cf22 "You chose: "} + deck.deck.get(userInput).getRank() + {\cf22 " of "} + deck.deck.get(userInput).getSuit()); \par
00097             {\cf19 return} userInput; {\cf20 // Return the user input}\par
00098         \} {\cf19 else} \{\par
00099             System.out.println({\cf22 "No input available."}); {\cf20 // If there is no user input, print an error message}\par
00100             {\cf19 return} -1;\par
00101         \}\par
00102     \}\par
00103 \par
00111     {\cf17 public} {\cf18 int} loadIndx(String inxString, Deck deck) \{\par
00112 \par
00113         {\cf18 int} userInput = Integer.parseInt(inxString); {\cf20 // Convert the user input to an integer}\par
00114 \par
00115         userInput = deck.deck.size() - userInput; {\cf20 // Subtract the user input from the size of the deck}\par
00116 \par
00117         {\cf19 if} (!(userInput < deck.deck.size())) \{ {\cf20 // If the user input is greater than the size of the deck}\par
00118             System.out.println({\cf22 "Invalid Index."}); {\cf20 // Print an error message}\par
00119             {\cf19 return} -1;\par
00120         \}\par
00121         {\cf19 if} (!deck.deck.get(userInput).isShown()) \{ {\cf20 // If the card at the user input index is not shown}\par
00122             System.out.println({\cf22 "Invalid Index."}); {\cf20 // Print an error message}\par
00123             {\cf19 return} -1;\par
00124         \}\par
00125         {\cf20 // otherwise, print the card's rank and suit}\par
00126         System.out.println(\par
00127                 {\cf22 "You chose: "} + deck.deck.get(userInput).getRank() + {\cf22 " of "} + deck.deck.get(userInput).getSuit());\par
00128         {\cf19 return} userInput; {\cf20 // Return the user input}\par
00129     \}\par
00130 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
